###############################################################################################################
# BGP peerings

{# Define which ASN is for local region and which ASN is for the remote region #}

{% if region == 'West' -%}
    {%- set local_ASN  = 65000 -%}
    {%- set remote_ASN = 65000 -%}
{%- else -%} {# East region #}
    {%- set local_ASN = 65000 -%}
    {%- set remote_ASN = 65000 -%}
{%- endif %}


# Do not advertise to EBGP peers (ie., outside the local region)

config router route-map
    edit "LOCAL_REGION_ONLY"
        config rule
            edit 1
                set set-community "no-export"
            next
        end
    next
end

# Tag-based resolution ('merge') is required with this design:
# (1) on DCs to which shortcuts can be established (branches from a remote region building shortcut to the DC),
#     in this PoC this scenario is only when cross_region_advpn is True
# (2) on DCs which can reach branches of a remote region via summary routes from multiple DCs of the remote region
#     in this PoC this is always True for ASHBURN-DC because:
#     - with cross_region_advpn: regional loopback summaries are received from PARIS-DC/DC2
#     - without cross_region_advpn: regional LAN summaries are received from PARIS-DC/DC2
#     For PARIS-DC/DC2 this is never True because they connect to a single DC in EAST region
#
# For configuration simplification, tag-based resolution is always enabled on PARIS-DC/DC2, no attempt is made to only
# configure tag-based resolution when only cross_region_advpn is True

config router route-map
    edit "H1_TAG"
        config rule
            edit 1
                set set-tag 1
            next
        end
    next
    edit "H2_TAG"
        config rule
            edit 1
                set set-tag 2
            next
        end
    next
end

config router bgp
    set as {{local_ASN}}
    set router-id {{loopback}}
    set keepalive-timer 15
    set holdtime-timer 45
    set ibgp-multipath enable
    set ebgp-multipath enable

    set recursive-next-hop enable
    set tag-resolve-mode merge

    {% if bidir_sdwan == 'remote_sla' %}
        set recursive-inherit-priority enable
    {% endif %}

    {% if not cross_region_advpn -%}
        # Advertise regional LAN summaries between the regions
        config aggregate-address
            edit 1
                {% if region == 'West' %}
                    set prefix 10.0.0.0/14
                {% else %}
                    set prefix 10.4.0.0/14
                {% endif %}
            next
        end
    {% endif -%}

    # PARIS-DC receives loopback addresses from Nantes and Greenlog which are advertised by Toulouse local-Hub
    # These loopbacks are BGP loopback prefixes unlike for directly connected branches (IKE static routes)
    # These BGP loopbacks must not be re-advertised anywhere (ASBURN-DC or other local branches) so they are aggregated
    # under the global loopback summary
    config aggregate-address
        edit 1
            set prefix 10.200.{{region_id}}.0/24
            set summary-only enable
        next
    end

    config neighbor
        {% if region == 'West' -%}
            {% set neighbors = [ {'ip': '10.200.2.254', 'RM_in':'H1_TAG'} ] %}
        {% else %}
            {% set neighbors = [ {'ip': '10.200.1.254', 'RM_in':'H1_TAG'}, {'ip': '10.200.1.253', 'RM_in':'H2_TAG'}] %}
        {% endif -%}

        {% for neighbor in neighbors -%}
        edit "{{neighbor.ip}}"
            set remote-as {{remote_ASN}}
            set interface "lo-BGP"
            set update-source "lo-BGP"
#             set ebgp-enforce-multihop enable

            {% if cross_region_advpn %}
                # Preserve next-hop for ADVPN
#                 set attribute-unchanged next-hop
            {% endif %}

            set advertisement-interval 1
            set link-down-failover enable
            set soft-reconfiguration enable
            set connect-timer 1

            set route-map-in "{{neighbor.RM_in}}"
            set route-map-out "REGION_OUT"
        next
        {% endfor %}
    end

    config neighbor-group
        edit "EDGE"
            set interface "lo-BGP"
            set update-source "lo-BGP"
            set remote-as {{local_ASN}}
            set route-reflector-client enable
            set advertisement-interval 1
            set soft-reconfiguration enable

            set route-map-out "EDGE_OUT"
            {% if not cross_region_advpn %}
                set next-hop-self enable
            {% endif %}
        next
    end
    config neighbor-range
        edit 1
            set prefix 10.200.{{region_id}}.0 255.255.255.0
            set neighbor-group "EDGE"
        next
    end

    config network
        edit 1
            set prefix {{lan.subnet}} {{lan.mask}}
        next
        {% if cross_region_advpn %}
            # the global loopback summary is advertised to edges but it is not advertised to other regions
            # this summary is created with a static blackhole route
            edit 102
                set prefix 10.200.0.0 255.255.0.0
                set route-map "LOCAL_REGION_ONLY"
            next
            # send regional loopback summary to peering regions
            # this summary is created with a static blackhole route
            edit 103
                set prefix 10.200.{{region_id}}.0 255.255.255.0
            next
        {% else %}
            # send regional loopback summary to edges but do not advertise it to other regions
            # this summary is created with a static blackhole route
            edit 102
                set prefix 10.200.{{region_id}}.0 255.255.255.0
                set route-map "LOCAL_REGION_ONLY"
            next
        {% endif %}
    end
end

{% if vrf_aware_overlay %}
# VRF-aware overlay
#
# VRF {{vrf_pe}} is used as PE VRF to carry vpnv4 prefixes for the CE VRFs
{% if vrf_pe == vrf_seg0 -%}
# It is also used to carry IPv4 prefixes for port5 LAN which is in same VRF as the PE VRF
{% endif -%}
# For VPNv4 RD and RT we DO NOT use the local ASN, we use 65000 for all devices from all regions

    config router bgp
        config neighbor-group
            edit "EDGE"
                set route-reflector-client-vpnv4 enable
                set soft-reconfiguration-vpnv4 enable
#                 {% if FOS >= 7_002_004 %}
#                     # No ADVPN for VRF-RED, only ADVPN for the other VRFs
#                     set route-map-out-vpnv4 "EDGE_OUT_VPNV4"
#                 {% else %}
#                     # ADVPN for all VRFs
#                     set route-map-out-vpnv4 "EDGE_OUT"
#                 {% endif %}
                 set route-map-out-vpnv4 "EDGE_OUT"
                {% if not cross_region_advpn %}
                    set next-hop-self-vpnv4 enable
                {% endif %}
            next
        end

        config neighbor
            {% for neighbor in neighbors -%}
            edit "{{neighbor.ip}}"
                set route-map-in-vpnv4 "{{neighbor.RM_in}}"
                set route-map-out-vpnv4 "REGION_OUT"
                set soft-reconfiguration-vpnv4 enable
                {% if cross_region_advpn %}
                    # Preserve next-hop for ADVPN
                    #
                    # ATTENTION: from tests done with 7.2.5, this setting is not honored
                    # The BGP NH of VPNV4 prefixes is set to the BGP loopback of the DC
                    # So it breaks cross-regional shortcut routing convergence
#                     set attribute-unchanged-vpnv4 next-hop
                {% endif %}
            next
            {% endfor %}
        end

        config network
            {% for name, segment in vrf_segments.items() %}
                {% if name != 'LAN' %}  {# port5/SEG0 is already defined above with bgp config #}
                    edit "{{10+loop.index0}}"
                        set prefix {{segment.subnet}} {{segment.mask}}
                    next
                {% endif %}
            {% endfor %}
#             {% if vrf_aware_overlay %}
#                 # No ADVPN in VRF-RED: filter VRF-RED prefixes based on RT
#                 # advertise global summary 10.0.0.0/8 to VRF-RED branches
#                 edit 200
#                     set prefix 10.0.0.0 255.0.0.0
#                     set route-map "EDGE_VRF-RED_ONLY"
#                 next
#                 {% if region == 'West' %}
#                     # summaries needed for PARIS-DC and WEST-DC2 subnets
#                     edit 201
#                         set prefix 10.{{dc_id}}.0.0 255.255.0.0
#                         set route-map "EDGE_VRF-RED_ONLY"
#                     next
#                 {% endif %}
#             {% endif %}
        end

        config vrf
            edit "{{vrf_pe}}"
                set role pe
            next
            {% for segment in vrf_segments.values() %}
                {% if segment.vrfid != vrf_pe %}
                    edit "{{segment.vrfid}}"
                        set role ce
                        set rd "65000:{{segment.vrfid}}"
                        set export-rt "65000:{{segment.vrfid}}"
                        set import-rt "65000:{{segment.vrfid}}"
                    next
                {% endif %}
            {% endfor %}
        end
    end
{% endif %}
