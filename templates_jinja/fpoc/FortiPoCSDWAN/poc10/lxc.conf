hostname {{name}}

{# Create/Configure interfaces and default routing #}
{# In case of namespaces, create scripts to conveniently enter namespaces #}

{% if namespaces|default(false) %}
    ip addr flush dev {{interface}} scope global
    ip addr add dev {{interface}} {{ipmask}} brd +
    ip link set dev {{interface}} up
    {% for ns in namespaces.values() %}
        ip netns add {{ns.alias}}
        ip netns exec {{ns.alias}} ip link set dev lo up
        ip link add link {{interface}} name {{interface}}.{{ns.vlanid}} type vlan id {{ns.vlanid}}
    	ip link set {{interface}}.{{ns.vlanid}} netns {{ns.alias}}
        ip netns exec {{ns.alias}} ip addr flush dev {{interface}}.{{ns.vlanid}} scope global
        ip netns exec {{ns.alias}} ip addr add dev {{interface}}.{{ns.vlanid}} {{ns.ipmask}} brd +
        ip netns exec {{ns.alias}} ip link set dev {{interface}}.{{ns.vlanid}} up
        ip netns exec {{ns.alias}} ip route replace default via {{ns.gateway}}

        echo '#!/bin/bash' > ~/enter_{{ns.alias}}.sh
        echo 'ip netns exec {{ns.alias}} /bin/bash' >> ~/enter_{{ns.alias}}.sh
        chmod a+x ~/enter_{{ns.alias}}.sh
    {% endfor %}

    {# Configure .bashrc so that the name of the current namespace is displayed in the PROMPT #}
    {# Use quotes for the echo command so that it is not resolved by the bash #}
    {# Use 'raw' to avoid jinja resolving the bash variables with curly braces #}
    grep -v '_ns_name' ~/.bashrc > ~/.bashrc2
    {% raw %}
    echo '_ns_name=$(ip netns identify 2>/dev/null)' >> ~/.bashrc2
    echo 'PS1="\e[0;31m${_ns_name:+(${_ns_name})}\e[m${debian_chroot:+($debian_chroot)}\u@\h:\w# "' >> ~/.bashrc2
    {% endraw %}
    echo "unset _ns_name" >> ~/.bashrc2
    rm -f ~/.bashrc
    mv ~/.bashrc2 ~/.bashrc
{% else %}
    {% if vlan %}
        ip link add link {{interface}} name {{interface}}.{{vlan}} type vlan id {{vlan}}
        ip addr flush dev {{interface}}.{{vlan}} scope global
        ip addr add dev {{interface}}.{{vlan}} {{ipmask}} brd +
        ip link set dev {{interface}}.{{vlan}} up
    {% else %}
        ip addr flush dev {{interface}} scope global
        ip addr add dev {{interface}} {{ipmask}} brd +
        ip link set dev {{interface}} up
    {% endif %}
{% endif %}

{% if gateway %}
    ip route replace default via {{gateway}}
{% endif %}

{# Add entries in /etc/hosts for all PC clients #}

{# Re-create the /etc/hosts each time to avoid accumulation (idempotency) #}
echo -e "127.0.0.1\tlocalhost" > /etc/hosts
echo -e "198.18.8.8\tINTERNET-SERVER" >> /etc/hosts

{% for host in hosts %}
    echo -e "{{host.ip}}\t{{host.name}}" >> /etc/hosts
{% endfor %}

{% if namespaces|default(false) %}
    {# Start HTTP Servers in a tmux session for each namespace #}
    tmux kill-session -t NS_SERVERS
    tmux new-session -d -s NS_SERVERS
    {% for name, ns in namespaces.items() %}
        tmux send-keys -t NS_SERVERS '~/enter_{{ns.alias}}.sh' C-m
        tmux send-keys -t NS_SERVERS 'python3 -m http.server --bind 0.0.0.0 80 --directory /var/www/html &' C-m
        tmux send-keys -t NS_SERVERS '/fortipoc/udp_echo.py --server --port 5061 &' C-m
        {% for port in [8080, 8081, 8082, 8083] %}
            tmux send-keys -t NS_SERVERS 'python3 -m http.server --bind 0.0.0.0 {{port}} --directory /var/www/html &' C-m
            tmux send-keys -t NS_SERVERS '/fortipoc/udp_echo.py --server --port {{port}} &' C-m
        {% endfor %}
        tmux send-keys -t NS_SERVERS 'exit' C-m
    {% endfor %}
{% endif %}

alias udp_echo='/root/udp_echo.py client -sp 8080 -mp 10'