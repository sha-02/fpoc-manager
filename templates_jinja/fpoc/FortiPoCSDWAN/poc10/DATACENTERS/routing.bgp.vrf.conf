{% if vrf_aware_overlay %}
{% extends "./routing.bgp.j2" %} {# shared jinja variables needed for BGP #}
{% block bgp_vrf %}
#
# VRF-aware overlay
#
# VRF {{vrf_pe}} is used as PE VRF to carry vpnv4 prefixes for the CE VRFs
{% if vrf_pe == vrf_blue -%}
# It is also used to carry IPv4 prefixes for port5 LAN which is in same VRF as the PE VRF
{% endif -%}
# For VPNv4 RD and RT we DO NOT use the local ASN, we use 65000 for all devices from all regions

{% if bgp_route_reflection and FOS >= 7_002_004 %}
# No BGP RR (no ADVPN) for VRF-RED, only BGP RR for the other VRFs

# - "No ADVPN" can mean two things:
#   (1) There will not be any branch-to-branch traffic (e.g, ATMs in VRF-RED)
#       In this case, VRF-RED branches simply need to receive the subnets from the DataCenters (10.{1|2|4}.0.0/16)
#       For simplicity, we can also simply send a global LAN summary (10.0.0.0/8) to the VRF-RED branches
#   (2) There should hardly be any branch-to-branch traffic (but it can happen)
#       VRF-RED branches need to reach the DC subnets but also other branches in VRF-RED
#       The global LAN summary (eg, 10.0.0.0/8) is sent
#
# - HUBS must advertise a global LAN summary route (10.0.0.0/8) into VRF-RED EDGE
#   as well as a summary route for its DataCenter (W-DC1 = 10.1.0.0/26, W-DC2= 10.2.0.0/16)
#   these two DC-specific subnets are needed because the SD-WAN rule mixes DC1+DC2 with 'fib-best-match'
#   so we need a more specific route for each DC in order to send the traffic to the correct DC
# - These summaries (global LAN and DCs LANs) must not be advertised to other regions -> restricted with 'no-export' community
# - HUB must filter VPNV4 prefixes with RT 65000:2 towards the EDGE
# - But the summary routes, which also have RT 65000:2 must be allowed so the summary is tagged with 'tag 32768'
#   when it is injected to BGP
# - summaries are added by means of static blackhole routes because:
#   . it is not possible to apply a route-map when creating an aggregate so cannot add tag 32768
#   . if an aggregate is used, the summary is not limited to VRF-RED

# Inject the summary routes (10.0.0.0/8, 10.{1|2}.0.0/16) in VRF-RED into the BGP table
# Add 'no-export' so that these summaries are only announced to EDGE (iBGP) and not announced to another REGION (eBGP)
# Add tag 32768 to indicate that this is a locally originated prefix

config router route-map
    edit "TAG_VRF-RED_LOCAL_LAN"
        config rule
            edit 1
                set match-vrf 2
                set set-tag 32768
            next
        end
    next
    edit "TAG_VRF-RED_SUMMARY"
        config rule
            edit 1
                set match-vrf 2
                set set-community "no-export"
                set set-tag 32768
            next
        end
    next
end


# Do not reflect routes from VRF-RED to EDGE except if it contains tag 32768 (self-originated summary)

config router extcommunity-list
    edit "VRF-RED_ROUTE_TARGET"
        set type standard
        config rule
            edit 1
                set action permit
                set type rt
                set match "65000:2"
            next
        end
    next
end

config router route-map
    edit "EDGE_OUT_VPNV4"
        config rule
            edit 1
                set action deny
                set match-ip-address "Lo-BGP_REGIONAL_SUMMARY"
            next
            edit 2
                set action permit
                set match-extcommunity "VRF-RED_ROUTE_TARGET"
                set match-tag 32768
            next
            edit 3
                set action deny
                set match-extcommunity "VRF-RED_ROUTE_TARGET"
            next
            edit 100
            next
        end
    next
end
{% endif %} {# bgp_route_reflection and FOS >= 7_002_004 #}

config router bgp
    config neighbor-group
        edit "EDGE"
            {{ "set route-reflector-client-vpnv4 enable" if bgp_route_reflection }}
            {{ "set next-hop-self-vpnv4 enable" if bgp_aggregation }}
            set soft-reconfiguration-vpnv4 enable
            set route-map-out-vpnv4 {{ "EDGE_OUT_VPNV4" if bgp_route_reflection and FOS >= 7_002_004 else "EDGE_OUT" }}
        next
    end

    config neighbor
        {% for neighbor in neighbors -%}
        edit "{{neighbor.ip}}"
            set route-map-in-vpnv4 "{{neighbor.RM_in}}"
            set route-map-out-vpnv4 "REGION_OUT"
            set soft-reconfiguration-vpnv4 enable
            {% if bgp_route_reflection and cross_region_advpn %}
                # Preserve next-hop for ADVPN
                #
                # ATTENTION: from tests done with 7.2.5, this setting is not honored
                # The BGP NH of VPNV4 prefixes is set to the BGP loopback of the DC
                # So it breaks cross-regional shortcut routing convergence
                set attribute-unchanged-vpnv4 next-hop
            {% endif %}
        next
        {% endfor %}
    end

    config network
        {% for name, segment in vrf_segments.items() %}
                {% if name != "LAN" %}  {# LAN(SEG0/port5/lan.port) is already defined above with bgp config #}
                edit "{{10+loop.index0}}"
                    set prefix {{segment.ipmask}}
                    {% if name == 'SEGMENT_2' and bgp_route_reflection and FOS >= 7_002_004 %}
                        # No ADVPN in VRF-RED: aggregate 10.0.0.0/8 _and_ subnets from DCs must be advertised to branches
                        set route-map "TAG_VRF-RED_LOCAL_LAN"
                    {% endif %}
                    {% if bgp_aggregation %}
                        set route-map "TAG_LOCAL_LAN"
                    {% endif %}
                next
            {% endif %}
        {% endfor %}
        {% if bgp_route_reflection and FOS >= 7_002_004 %}
            # No ADVPN in VRF-RED: filter VRF-RED prefixes based on RT
            # advertise global summary 10.0.0.0/8 to VRF-RED branches
            edit 200
                set prefix 10.0.0.0 255.0.0.0
                set route-map "TAG_VRF-RED_SUMMARY"
            next
        {% endif %}
    end

    config vrf
        edit "{{vrf_pe}}"
            set role pe
        next
        {% for segment in vrf_segments.values() %}
            {% if segment.vrfid != vrf_pe %}
                edit "{{segment.vrfid}}"
                    set role ce
                    set rd "65000:{{segment.vrfid}}"
                    set export-rt "65000:{{segment.vrfid}}"
                    set import-rt "65000:{{segment.vrfid}}"
                next
            {% endif %}
        {% endfor %}
    end
end

{% endblock %} {# end of extension of 'router.bgp.j2' #}
{% endif %} {# vrf_aware_overlay #}
