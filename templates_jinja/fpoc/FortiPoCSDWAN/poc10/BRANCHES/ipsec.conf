###############################################################################################################
# IPsec

{% set overlay1 = '10.201' %}
{% set overlay2 = '10.202' %}
{% set overlay3 = '10.203' %}

{%- set dc1 = datacenter.first -%}
{%- set dc2 = datacenter.second -%}

{%- set phase1s = [
    {   'name': 'H1_INET1', 'interface': wan.inet1.name, 'remote_gw': dc1.inet1.ip, 'link_cost': 0,
        'networkid': dc1.id~'1', 'localid': name~'_INET1', 'status': 'up',
        'ip': overlay1~'.'~dc1.id~'.'~branch_id, 'remote_ip':overlay1~'.'~dc1.id~'.254', 'cross_underlay': false,
    },
    {   'name': 'H1_INET2', 'interface': wan.inet2.name, 'remote_gw': dc1.inet2.ip, 'link_cost': 5,
        'networkid': dc1.id~'2', 'localid': name~'_INET2', 'status': 'up',
        'ip': overlay2~'.'~dc1.id~'.'~branch_id, 'remote_ip':overlay2~'.'~dc1.id~'.254', 'cross_underlay': false,
    },
    {   'name': 'H1_MPLS', 'interface': wan.mpls1.name, 'remote_gw': dc1.mpls.ip, 'link_cost': 0,
        'networkid': dc1.id~'3', 'localid': name~'_MPLS', 'status': 'up',
        'ip': overlay3~'.'~dc1.id~'.'~branch_id, 'remote_ip':overlay3~'.'~dc1.id~'.254', 'cross_underlay': false,
    },
    {   'name': 'H2_INET1', 'interface': wan.inet1.name, 'remote_gw': dc2.inet1.ip, 'link_cost': 0,
        'networkid': dc2.id~'1', 'localid': name~'_INET1', 'status': 'up' if region == 'West' else 'down',
        'ip': overlay1~'.'~dc2.id~'.'~branch_id, 'remote_ip':overlay1~'.'~dc2.id~'.254', 'cross_underlay': false,
    },
    {   'name': 'H2_INET2', 'interface': wan.inet2.name, 'remote_gw': dc2.inet2.ip, 'link_cost': 5,
        'networkid': dc2.id~'2', 'localid': name~'_INET2', 'status': 'up' if region == 'West' else 'down',
        'ip': overlay2~'.'~dc2.id~'.'~branch_id, 'remote_ip':overlay2~'.'~dc2.id~'.254', 'cross_underlay': false,
    },
    {   'name': 'H2_MPLS', 'interface': wan.mpls1.name, 'remote_gw': dc2.mpls.ip, 'link_cost': 0,
        'networkid': dc2.id~'3', 'localid': name~'_MPLS', 'status': 'up' if region == 'West' else 'down',
        'ip': overlay3~'.'~dc2.id~'.'~branch_id, 'remote_ip':overlay3~'.'~dc2.id~'.254', 'cross_underlay': false,
    },
    {   'name': 'H1_INET1X2', 'interface': wan.inet1.name, 'remote_gw': dc1.inet2.ip, 'link_cost': 0,
        'networkid': dc1.id~'2', 'localid': name~'_INET1', 'status': 'up',
        'ip': overlay2~'.'~dc1.id~'.2'~branch_id, 'remote_ip':overlay2~'.'~dc1.id~'.254', 'cross_underlay': true,
    },
    {   'name': 'H1_INET2X1', 'interface': wan.inet2.name, 'remote_gw': dc1.inet1.ip, 'link_cost': 5,
        'networkid': dc1.id~'1', 'localid': name~'_INET2', 'status': 'up',
        'ip': overlay1~'.'~dc1.id~'.2'~branch_id, 'remote_ip':overlay1~'.'~dc1.id~'.254', 'cross_underlay': true,
    },
    {   'name': 'H2_INET1X2', 'interface': wan.inet1.name, 'remote_gw': dc2.inet2.ip, 'link_cost': 0,
        'networkid': dc2.id~'2', 'localid': name~'_INET1', 'status': 'up' if region == 'West' else 'down',
        'ip': overlay2~'.'~dc2.id~'.2'~branch_id, 'remote_ip':overlay2~'.'~dc2.id~'.254', 'cross_underlay': true,
    },
    {   'name': 'H2_INET2X1', 'interface': wan.inet2.name, 'remote_gw': dc2.inet1.ip, 'link_cost': 5,
        'networkid': dc2.id~'1', 'localid': name~'_INET2', 'status': 'up' if region == 'West' else 'down',
        'ip': overlay1~'.'~dc2.id~'.2'~branch_id, 'remote_ip':overlay1~'.'~dc2.id~'.254', 'cross_underlay': true,
    },
    ]
-%}

# localid on Branch is convenient since it is shown on IPsec monitor of DCs

{% if multicast %}
# PIM does not bind to unnumbered interfaces: mode-cfg must be configured for IPsec tunnels
# "dependent" shortcuts are mandatory with mode-cfg overlays (0778974/0793117)
{% endif %}
{% if shortcut_routing == 'ipsec_selectors' %}
# ADVPN based off IPsec selectors allows routing for (intra-region and inter-region) branch-to-branch traffic
# to converge over the shortcut
# BGP route-reflection is no longer needed on the Hub and summary routes can be sent to the Branches
#
# 'add-route enable' to populate routes over shortcuts based on IPsec SA traffic selectors
# 'mode-cfg-allow-client-selector enable' to allow configuration of phase src-selectors if mode-cfg is used
#
# *******************************
# *** inter-region LIMITATION ***
# *******************************
#
# Inter-regional Branch-to-HUB traffic will create a shortcut Branch-to-RemoteRegionHub but traffic will continue passing
# through the Hubs.
# Let's take PC-WEST-BR1--WEST-BR1===WEST-DC1===EAST-DC1--PC-EAST-DC1 as an example
#
# This is because the shortcut tunnel is created against the inter-regional Hub-to-Hub static phase1 on EAST-DC1
# The corresponding phase2 is configured with wildcard selectors (any/any)
# The inter-regional Hub-to-Hub tunnel between WEST-DC1-EAST-DC1 is supposed to carry all inter-regional traffic
# so its selectors are not narrowed.
# It implies that when WEST-BR1 creates a shortcut with EAST-BR1 the following happens:
# - the shortcut tunnel is created
# - a default-route with a distance of 15 is created by IKE on WEST-BR1 because of 0.0.0.0/0 selector on EAST-BR1 inter-hub tunnel
# - this default-route is inactive because it is hidden by the SD-WAN default-route which has a distance of 1
# - since there is no active route over the shortcut then WEST-BR1 continue sending the traffic for EAST-DC1 over its own Hub
{% endif %}

# The local-out BGP session runs over a single overlay (not subject to SDWAN)
# 'Blackout failover' (this overlay goes down) is covered by having BGP hold-timer longer than DPD.
# DPD timers are much more important now, so that IKE can withdraw the loopback statics (exchange-ip-addrv4)
# When overlay goes down, BGP session is expected to switchover seamlessly, no problem, no flap

# The DPD timers on the Branch must be longer than the DPD timers on the Hub
# so that the Hub detects the failure first

# Recommendations for optimizing failover are:
# - BGP timers longer than DPD
# - DPD on Hub is on-idle
# - DPD on Hub must be shorter than DPD on Branch

{%- for phase1 in phase1s %}
    {% if phase1.cross_underlay and not full_mesh_ipsec %}
        {% continue %}
    {% endif %}
    config vpn ipsec phase1-interface
        edit "{{phase1.name}}"
            set interface "{{phase1.interface}}"
            set ike-version 2
            set network-overlay enable
            set network-id {{phase1.networkid}}
            set peertype any
            set localid "{{phase1.localid}}"
            {{ "set exchange-fgt-device-id enable" if (FOS >= 7_002_006 and FOS < 7_004_000) or FOS >= 7_004_001 }} {# FOS 7.2.6+ or FOS 7.4.1+ #}
            set net-device enable
            {{ "set auto-discovery-receiver enable" if regional_advpn }}
            {{ "set exchange-interface-ip enable" if not regional_advpn }}
            set exchange-ip-addr4 {{loopback}}
            {{ "set link-cost %s"%(phase1.link_cost) if FOS >= 7_002_001 }}

            {% if overlay == 'mode_cfg' %}
                set mode-cfg enable
                set auto-discovery-shortcuts dependent
            {% endif %}

            {% if shortcut_routing == 'ipsec_selectors' %}
                set add-route enable
                {{ "set mode-cfg-allow-client-selector enable" if overlay == 'mode_cfg' }}
            {% else %}
                set add-route disable
            {% endif %}

            set dpd on-idle
            set dpd-retryinterval 5
            set idle-timeout enable
            set idle-timeoutinterval 5
            set remote-gw {{phase1.remote_gw}}
            set psksecret {{phase1.networkid}}{{phase1.networkid}}{{phase1.networkid}}
            {{ "set encapsulation vpn-id-ipip" if vrf_aware_overlay }}
            {% if npu == 'NP6' %}
                set proposal aes128-sha256 aes128-sha1
            {% else %}
                set proposal aes128gcm-prfsha256 aes128-sha256 aes128-sha1
            {% endif %}
            set dhgrp 19 14
        next
    end

    config vpn ipsec phase2-interface
        edit "{{phase1.name}}"
            set phase1name "{{phase1.name}}"
            set keepalive enable
            {% if npu == 'NP6' %}
                set proposal aes128-sha256 aes128-sha1
            {% else %}
                set proposal aes128gcm aes128-sha256 aes128-sha1
            {% endif %}
            set dhgrp 19 14
            {% if shortcut_routing == 'ipsec_selectors' %}
                set src-addr-type name
                set dst-addr-type name
                set src-name "gLAN"  {# local LAN + loopback-BGP #}
                set dst-name "all"
                set auto-negotiate enable {# for negotiation so that tunnel is ready for data traffic #}
            {% endif %}
        next
    end

    config system interface
        edit "{{phase1.name}}"
            set status {{phase1.status}}
            {% if multicast %}
                set allowaccess ping
                set monitor-bandwidth enable
                {% if overlay == 'static' %}
                  set ip {{phase1.ip}} 255.255.255.255
                  set remote-ip {{phase1.remote_ip}} 255.255.255.0
                {% endif %}
            {% endif %}
            {{ "set vrf "~vrf_pe if vrf_aware_overlay }}
        next
    end
{% endfor %}
