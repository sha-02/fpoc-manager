###############################################################################################################
# SD-WAN

# 'set hold-down-time 20' to prevent falling back to most-preferred shortcut before measuring its quality
#
{% if shortcut_routing == 'ipsec_selectors' %}
# 'set tie-break fib-best-match' MUST NOT be used for sd-wan rules which can be involved for shortcut traffic
# Because, with this design, the shortcut always has the best match and therefore traffic would never leave a shortcut
# when it's in bad SLA
{% else %}  {# 'exchange_ip' PoC9 #}
# 'set tie-break fib-best-match' to select path with best-route to another shortcut instead of
# going back to feasible routes via Hub
{% endif %}

##### SD-WAN zones -----------------------------------------------

config system sdwan
    set status enable
    config zone
        edit "INTERNET"
        next
        edit "VPN"
        next
        {% if vrf_aware_overlay and direct_internet_access %}
            edit "INTERNET_"
            next
        {% endif %}
    end
end

##### SD-WAN members -----------------------------------------------

{% set ipsec_overlays = [
    {'id': 111, 'interface': 'H1_INET1', 'cross_underlay': false, 'transport_group': 1, 'status': 'enable'},
    {'id': 122, 'interface': 'H1_INET2', 'cross_underlay': false, 'transport_group': 1, 'status': 'enable'},
    {'id': 133, 'interface': 'H1_MPLS', 'cross_underlay': false, 'transport_group': 2, 'status': 'enable'},
    {'id': 211, 'interface': 'H2_INET1', 'cross_underlay': false, 'transport_group': 21, 'status': 'enable' if region == 'West' else 'disable' },
    {'id': 222, 'interface': 'H2_INET2', 'cross_underlay': false, 'transport_group': 21, 'status': 'enable' if region == 'West' else 'disable'},
    {'id': 233, 'interface': 'H2_MPLS', 'cross_underlay': false, 'transport_group': 22, 'status': 'enable' if region == 'West' else 'disable'},
    {'id': 112, 'interface': 'H1_INET1X2', 'cross_underlay': true, 'transport_group': 1, 'status': 'enable'},
    {'id': 121, 'interface': 'H1_INET2X1', 'cross_underlay': true, 'transport_group': 1, 'status': 'enable'},
    {'id': 212, 'interface': 'H2_INET1X2', 'cross_underlay': true, 'transport_group': 21, 'status': 'enable' if region == 'West' else 'disable'},
    {'id': 221, 'interface': 'H2_INET2X1', 'cross_underlay': true, 'transport_group': 21, 'status': 'enable' if region == 'West' else 'disable'},
    ]
-%}

config system sdwan
    config members

        # Underlays
        edit 1
            set interface "{{wan.inet1.name}}"
            set zone "INTERNET"
            {# set gateway {{wan.inet1.subnet}}.254 #}
        next
        edit 2
            set interface "{{wan.inet2.name}}"
            set zone "INTERNET"
            {# set gateway {{wan.inet2.subnet}}.254 #}
        next

        # Overlays
        {% for member in ipsec_overlays %}
        {% if member.cross_underlay and not full_mesh_ipsec %}
            {% continue %}
        {% endif %}
        edit {{member.id}}
            set interface "{{member.interface}}"
            set zone "VPN"
            set source {{loopback}}
            set priority 10
            set status {{member.status}}
            {{ "set transport-group %s"%(member.transport_group) if advpnv2 }}
        next
        {% endfor %}
    end
end

{% if vrf_aware_overlay and direct_internet_access -%}
    {% set inter_vrf_members = [] -%}  {# List of inter-vrf members (YELLOW_1, RED_1, and possibly BLUE_1) for DIA Internet of CE VRF #}
# Internet DIA over the inter-vrf links from the LAN VRFs (YELLOW_1, RED_1, and possibly BLUE_1)
        config system sdwan
            config members
            {% for name in inter_segments.keys() -%}
                {% do inter_vrf_members.append(30+loop.index0) -%}
                edit "{{30+loop.index0}}"
                    set interface "{{name}}1"
                    set zone "INTERNET_"
                next
            {% endfor -%}
            end
        end
{% endif %}


### SD-WAN health-checks -----------------------------------------------

{# Build the list of SLA members for each health-check #}

{# members for SLA_DataCenter #}
{% set sla_dc_members = [] -%} {# Must contain all overlay tunnels #}
{% for ov in ipsec_overlays -%}
    {% if ov.cross_underlay and not full_mesh_ipsec -%}
        {% continue -%}
    {% endif -%}

    {% do sla_dc_members.append(ov.id) -%}
{% endfor -%}

config system sdwan
    config health-check
        edit "SLA_DataCenters"
            set server 10.200.99.{{region_id}}
            set sla-fail-log-period 10
            set sla-pass-log-period 10
            set mos-codec g729
            set probe-timeout 1000
            set members {{ sla_dc_members|join(' ') }}
            {% if bidir_sdwan == 'remote_sla' %}
                set embed-measured-health enable
            {% endif %}
            config sla
                edit 1
                    set link-cost-factor latency packet-loss
                    set latency-threshold 150
                    set packetloss-threshold 1
                next
                edit 2
                    set link-cost-factor mos
                    set mos-threshold "4.0"
                next
            end
        next
    end
end

{# members for SLA_Internet = Internet underlays + Tunnels if RIA #}

{% if vrf_aware_overlay and not direct_internet_access -%}
    {% set sla_internet_members = [] -%}  {# no Internet underlay for vrf with RIA only #}
{% else -%}
    {% set sla_internet_members = [1, 2] -%}  {# Internet_1 and Internet_2 #}
{% endif -%}

{% for ov in ipsec_overlays -%} {# Add tunnels for RIA #}
    {% if remote_internet == 'mpls' and 'MPLS' in ov.interface -%}
        {% do sla_internet_members.append(ov.id) -%}
    {% endif -%}
    {% if ov.cross_underlay and not full_mesh_ipsec -%}
        {% continue -%}
    {% endif -%}
    {% if remote_internet == 'all' -%}
        {% do sla_internet_members.append(ov.id) -%}
    {% endif -%}
{% endfor -%}

{% if vrf_aware_overlay and direct_internet_access -%}
    {% do sla_internet_members.extend(inter_vrf_members) -%}
{% endif %}

config system sdwan
    config health-check
        edit "SLA_Internet"
            set server "198.18.8.8"
            set sla-fail-log-period 10
            set sla-pass-log-period 10
            set probe-timeout 1000
            set members {{ sla_internet_members|join(' ') }}
            config sla
                edit 1
                    set latency-threshold 150
                    set jitter-threshold 30
                    set packetloss-threshold 2
                next
                edit 2
                    set latency-threshold 300
                    set jitter-threshold 50
                    set packetloss-threshold 5
                next
            end
        next
    end
end

{% if vrf_aware_overlay and direct_internet_access %}
    config system sdwan
        config health-check
            edit "SLA_Internet2"
                set server "198.18.8.9"
                set sla-fail-log-period 10
                set sla-pass-log-period 10
                set probe-timeout 1000
                set members {{ inter_vrf_members|join(' ') }}
                config sla
                    edit 1
                        set latency-threshold 150
                        set jitter-threshold 30
                        set packetloss-threshold 2
                    next
                    edit 2
                        set latency-threshold 300
                        set jitter-threshold 50
                        set packetloss-threshold 5
                    next
                end
            next
        end
    end
{% endif %}

### SD-WAN with ADVPN v2.0 -----------------------------------------------

{% if advpnv2 %}
    config system sdwan
        config zone
            edit "VPN"
                set advpn-select enable
                set advpn-health-check "SLA_DataCenters"
            next
        end
    end
{% endif %}

### SD-WAN rules -----------------------------------------------

config system sdwan
    config service
        edit 1
            set name "DataCenters"
            set mode priority
            set src "Corporate"
            set internet-service enable
            set internet-service-custom "DC.Services"
            set health-check "SLA_DataCenters"
            set priority-members 111 122 133 211 222 233
            set link-cost-factor custom-profile-1
            set packet-loss-weight 95
            set latency-weight 5
            set hold-down-time 10
            set tie-break fib-best-match {# required to reach the correct DC LAN from a single rule #}
        next
        edit 2
            set name "DataCenters_MaxBW"
            {% if FOS >= 7_004_001 %}
                set mode sla
                set load-balance enable
            {% else %}
                set mode load-balance
            {% endif %}
            set src "Corporate"
            set internet-service enable
            set internet-service-app-ctrl 7932 7931 7930
            config sla
                edit "SLA_DataCenters"
                    set id 1
                next
            end
            set priority-members 111 122
        next
        edit 3
            {{ "set name VoiP_MOS" if shortcut_routing == 'exchange_ip' else "set name DataCenters_VoiP_MOS" }}
            set mode sla
            set protocol 17
            set start-port 5061
            set end-port 5061
            set dst {{ "Corporate" if shortcut_routing == 'exchange_ip' else "DataCenters" }}
            set src "Corporate"
            set hold-down-time 20
            config sla
                edit "SLA_DataCenters"
                    set id 2
                next
            end
            set priority-members 133 111 122 233 211 222
            set tie-break fib-best-match {# required to reach the correct DC LAN from a single rule #}

            {% if FOS == 7_004_000 %}
                # SD-WAN service rule stickiness for ADVPN routes
                set shortcut-stickiness enable
            {% endif %}
            {% if FOS >= 7_004_001 %}
                #  Traffic remains in the original session path if the path is within the SLA
                set sla-stickiness enable
            {% endif %}
        next
        {% if shortcut_routing != 'exchange_ip' %} {# no advpn or advpn with single best-route over shortcut => no fib-best-match #}
            # No fib-best-match for this Branch-to-Branch rule
            edit 4
                set name "Branches_VoiP_MOS"
                set mode sla
                set protocol 17
                set start-port 5061
                set end-port 5061
                set dst "Corporate"
                set src "Corporate"
                set hold-down-time 20
                config sla
                    edit "SLA_DataCenters"
                        set id 2
                    next
                end
                set priority-members 133 111 122 233 211 222

                {% if FOS == 7_004_000 %}
                    # SD-WAN service rule stickiness for ADVPN routes
                    set shortcut-stickiness enable
                {% endif %}
                {% if FOS >= 7_004_001 %}
                    #  Traffic remains in the original session path if the path is within the SLA
                    set sla-stickiness enable
                {% endif %}
            next
        {% endif %}
        edit 5
            set name "Branches"
            set mode sla
            set dst "Corporate"
            set src "Corporate"

            set hold-down-time 20
            {{ "set tie-break fib-best-match" if shortcut_routing == 'exchange_ip' }}  {# ADVPN with BGP RR #}

            config sla
                edit "SLA_DataCenters"
                    set id 1
                next
            end
            set priority-members 111 122 133 211 222 233
        next
    end
end

# --- Internet rules

{% if not vrf_aware_overlay %}
# rules 10 and 11 (High and Med prio) leverage AppCtrl routing while rule 12 (low prio) as no AppCtrl
# During learning phase, rules 10+11 cannot be matched which means learning traffic hits rule 12 (low prio)
# and is sent out members "1 2" (DIA, Internet_1 Internet_2) depending on SLA conditions
# learning traffic will hit firewall policy 2 (Internet DIA) which has AppCtrl enabled
# and therefore allows to populate 5-tuple for appctrl isdb cache
# subsequent traffic to dstip-dport in appctrl cache can hit sdwan rules 10+11 and can be sent out the right members
# and can be allowed by firewall policies 'Internet DIA' or 'Internet RIA'
# AppCtrl is enabled on firewall policy 'Internet RIA' because if all DIA Internet links go down then traffic will hit
# FIB (DIA sdwan rule 12 is ignored) and will policy 'Internet RIA'.
# If no AppCtrl was configured on policy 'Internet RIA' then all Internet traffic would be subject to regular FIB lookup
# and sdwan rules 10+11 would never be matched since 5-tuple would never be populated
#
# A rule of thumb could be:
# Enable AppCtrl on all FW policies which have egress interfaces that are involved with AppCtrl SDWAN rules
#
    config system sdwan
        config service
            edit 10
                set name "Internet_HighPriority"
                set mode sla
                set src "Corporate"
                set internet-service enable
                set internet-service-app-ctrl 16354 42635
                config sla
                    edit "SLA_Internet"
                        set id 1
                    next
                end
                {% if remote_internet == 'none' %}
                    set priority-members 1 2
                {% endif %}
                {% if remote_internet == 'mpls' %}
                    set priority-members 1 133 233 2
                {% endif %}
                {% if remote_internet == 'all' %}
                    set priority-members 1 111 122 133 2 211 222 233
                {% endif %}
            next
            edit 11
                set name "Internet_MedPriority"
                set mode sla
                set src "Corporate"
                set internet-service enable
                set internet-service-app-ctrl 33182 41468 16920
                config sla
                    edit "SLA_Internet"
                        set id 2
                    next
                end
                {% if remote_internet == 'none' %}
                    set priority-members 1 2
                {% endif %}
                {% if remote_internet == 'mpls' %}
                    set priority-members 1 2 133 233
                {% endif %}
                {% if remote_internet == 'all' %}
                    set priority-members 1 2 111 122 133 211 222 233
                {% endif %}
            next
            edit 12
                set name "Internet_LowPriority"
                set mode manual
                set src "Corporate"
                set dst "all"
                set priority-members 2 1
            next
        end
    end

{% else %} {# vrf_aware_overlay #}
# if direct_internet_access and vrf_aware_overlay then the config is quite complex.
# For explanation, let's consider LAN_BLUE in VRF 3 and WAN VRF in VRF 32
# VRF 3 has multiple default routes:
#   - one static default route over the inter-vrf link BLUE_1 for DIA via the WAN VRF
#   - multiple static default routes over the tunnels for RIA (MPLS tunnels and possibly INET tunnels)
# RIA traffic can be routed directly to the RIA tunnels within VRF 3 itself, easy...
# But DIA traffic has to be forwarded via BLUE_1 to WAN-VRF
# The problem is that the WAN-VRF has two Internet accesses: Internet_1 and Internet_2
# In VRF3 there is only a single link to reach Internet: BLUE_1
# We need to measure the SLA for DIA and for RIA because we need to prefer DIA and switchover to RIA if needed
# However if we configure a single SLA health-check for Internet server (198.18.8.8) over BLUE_1 then we don't know
# if this HC traffic will egress over Internet_1 or Internet_2 once in the WAN-VRF
# We cannot measure the quality of both Internet_1 and Internet_2 with a single SLA HC sent over BLUE_1
# If we do so and the traffic egress via Internet_1 in WAN-VRF then, as soon as Internet_1 SLA is BAD, then traffic
# will stop going DIA over BLUE_1 and will go RIA over the tunnels in VRF 3
# Basically, if only one Internet link is bad in the WAN-VRF then VRF 3 switches to RIA instead of continuing to do
# DIA via the remaining good Internet link in VRF-WAN
# We need a way to measure the SLA of both Internet_1 and Internet_2 by sending SLA HC over BLUE_1
# The solution is to sent SLA HC to two distinct servers: 198.18.8.8 and 198.18.8.9
# The first server is used to measure the SLA of the RIA tunnels, Internet_1, Internet_2, plus BLUE_1 "via" Internet_1
# The second server is used to measure the SLA of BLUE_1 "via" Internet_2
# HC for .8 over Internet_1 and Internet_2 is done by the WAN-VRF
# HC for .8 over the RIA tunnels is done by the PE VRF but these HC measurements are valid for all VRFs since tunnels are multi-vrf
# HC for .8 and .9 over BLUE_1 are done by the VRF 3
# Two policy routes are used in the WAN-VRF to ensure that the HC received from BLUE_0 egresses over Internet_1 for .8
# and egresses over Internet_2 for .9
# These two HC (SLA_Internet and SLA_Internet2) allows to measure the quality of Internet_1 and Internet_2 from the standpoint
# of VRF3 via BLUE_1
# "set sla-compare-method number" is mandatory to have the desired behavior:
# . If Internet_1 goes off SLA, Internet traffic from VRF3 stays DIA over BLUE_1 and is routed by WAN-VRF over Internet_2
# . If both Internet_1 and _2 are off SLA, Internet traffic from VRF3 goes RIA via its local tunnels in VRF3
#
# Note:
# I tried another solution which consists in having a single default route in VRF3 over BLUE_1 and push all Internet traffic
# for VRF3 to the WAN-VRF which was also the PE VRF: Internet_1, Internet_2 and all tunnels were in this WAN+PE VRF.
# I though that the WAN+PE VRF would take care of deciding whether traffic goes DIA or RIA since it has all links and all HC
# The problem arises when Internet traffic from VRF3 must go RIA because both Internet links are off SLA
# When it happens, the Internet traffic is SNATed in VRF3 with the inter-vrf link IP address (10.254.254.x), it ingresses
# the WAN+PE VRF in BLUE_0 and is sent to the desired RIA tunnel (say, H1_MPLS). Problem is on the other side, on the Hub.
# The Hub receives in the PE VRF (VRF 32 !!!) the SNATed traffic from VRF3.
# The traffic fails RPF.
# I could have tweaked the Hub to accept traffic from 10.254.254.0/24 (inter-vrf subnets on the Branches) but this is
# ugly for multiple reasons:
# 1- conceptually it means that Internet traffic from VRF3 over corporate tunnels is carried in another VRF (32) -- this one is a "ok, why not... it's similar to DIA"
# 2- it exposes the inter-vrf subnet of the branch: they should be local and could even be in link-local subnet 169.254.x.x
# 3- the logs generated on the Hub would not allow to know which hosts were doing RIA because they are all SNATed -- this one is the most problematic
# So I stopped going this direction
# Note that Dmitry tool this direction: he sends DIA and RIA via inter-vrf to PE+WAN-VRF (same VRF 32)
# then the choice of DIA or RIA is made in VRF32 to go DIA or RIA
# He probobly fixed point 2- RPF with default-route on Hub towards tunnels
# He takes assumption that point 3- NAT is accepted by customer which is where I don't think it would be accepted

    config system sdwan
        config service
            edit 10
                set name "Internet"
                set mode sla
                set src "Corporate"
                set dst "all"
                config sla
                    edit "SLA_Internet"
                        set id 2
                    next
                    {% if direct_internet_access %}
                        edit "SLA_Internet2"
                            set id 2
                        next
                    {% endif %}
                end

                {{ "set sla-compare-method number" if direct_internet_access }}

                {% if direct_internet_access and remote_internet == 'none' %}
                    set priority-members 1 2 {{ inter_vrf_members|join(' ') }}
                {% endif %}
                {% if direct_internet_access and remote_internet == 'mpls' %}
                    set priority-members 1 2 {{ inter_vrf_members|join(' ') }} 133 233
                {% endif %}
                {% if direct_internet_access and remote_internet == 'all' %}
                    set priority-members 1 2 {{ inter_vrf_members|join(' ') }} 111 122 133 211 222 233
                {% endif %}
                {% if not direct_internet_access and remote_internet == 'mpls' %}
                    set priority-members 133 233
                {% endif %}
                {% if not direct_internet_access and remote_internet == 'all' %}
                    set priority-members 111 122 133 211 222 233
                {% endif %}
            next
        end
    end
{% endif %}


