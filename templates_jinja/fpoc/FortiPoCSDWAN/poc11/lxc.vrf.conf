hostname {{name}}

{% set ipmask = namespaces['LAN'].ipprefix|ipaddr('network/prefix')|ipaddr(namespaces['LAN'].host_rank)%} {# eg, 10.0.1.99/24 #}
{% set gateway = namespaces['LAN'].ipprefix|ipaddr('address') %} {# eg, 10.0.1.1 #}

{# LAN segment #}
ip addr flush dev {{interface}} scope global
ip addr add dev {{interface}} {{ipmask}} brd +
ip link set dev {{interface}} up
ip route replace default via {{gateway}}

{# Other segments #}
{% for nsname, ns in namespaces.items() %}
    {% if nsname == 'LAN' %}
      {% continue %}
    {% endif %}

    {% set gateway = ns.ip|ipaddr('address') %} {# eg, 10.0.1.1 #}
    {% set ipmask = ns.ipprefix|ipaddr('network/prefix')|ipaddr(ns.host_rank)%} {# eg, 10.0.1.99/24 #}

    ip netns add {{ns.alias}}
    ip netns exec {{ns.alias}} ip link set dev lo up
    ip link add link {{interface}} name {{interface}}.{{ns.vlanid}} type vlan id {{ns.vlanid}}
    ip link set {{interface}}.{{ns.vlanid}} netns {{ns.alias}}
    ip netns exec {{ns.alias}} ip addr flush dev {{interface}}.{{ns.vlanid}} scope global
    ip netns exec {{ns.alias}} ip addr add dev {{interface}}.{{ns.vlanid}} {{ipmask}} brd +
    ip netns exec {{ns.alias}} ip link set dev {{interface}}.{{ns.vlanid}} up
    ip netns exec {{ns.alias}} ip route replace default via {{gateway}}

    echo '#!/bin/bash' > ~/enter_{{ns.alias}}.sh
    echo 'ip netns exec {{ns.alias}} /bin/bash' >> ~/enter_{{ns.alias}}.sh
    chmod a+x ~/enter_{{ns.alias}}.sh
{% endfor %}


{# Configure .bashrc so that the name of the current namespace is displayed in the PROMPT #}
{# Use quotes for the echo command so that it is not resolved by the bash #}
{# Use 'raw' to avoid jinja resolving the bash variables with curly braces #}
grep -v '_ns_name' ~/.bashrc > ~/.bashrc2
{% raw %}
echo '_ns_name=$(ip netns identify 2>/dev/null)' >> ~/.bashrc2
echo 'PS1="\e[0;31m${_ns_name:+(${_ns_name})}\e[m${debian_chroot:+($debian_chroot)}\u@\h:\w# "' >> ~/.bashrc2
{% endraw %}
echo "unset _ns_name" >> ~/.bashrc2
rm -f ~/.bashrc
mv ~/.bashrc2 ~/.bashrc

{# Re-create the /etc/hosts each time to avoid accumulation (idempotency) #}

echo -e "127.0.0.1\tlocalhost" > /etc/hosts
echo -e "198.18.8.8\tINTERNET-SERVER" >> /etc/hosts

{% for name, host in hosts.items() %}
    echo -e "{{host.gateway|ipaddr('network/prefix')|ipaddr(host.rank)|ipaddr('address')}}\t{{name}}" >> /etc/hosts
{% endfor %}

{# TCP servers on 80-83, 8080, 5061 are started by /fortipoc/postboot #}
{# UDP servers on 8080-8083, 5061 are started by /fortipoc/postboot #}
{# So, for the LAN/BLUE VRF, all servers are already started #}
{# For all other namespaces (RED and YELLOW VRFs), must start all TCP and all UDP servers #}

{% set TCP_servers = [80, 81, 82, 83, 8080, 5061] %}
{% set UDP_servers = [8080, 8081, 8082, 8083, 5061] %}

{% for nsname, ns in namespaces.items() %}
    {% if nsname != 'LAN' %} {# RED and YELLOW VRFs #}

        {% set tmux_session = "%s_SERVERS"%ns.color %}
tmux kill-session -t {{tmux_session}}
tmux new-session -d -s {{tmux_session}}
tmux send-keys -t {{tmux_session}} '~/enter_{{ns.alias}}.sh' C-m

        {% for port in UDP_servers %}
tmux send-keys -t {{tmux_session}} '/fortipoc/udp_echo.py server --port {{port}} &' C-m
        {% endfor %}

        {% for port in TCP_servers %}
tmux send-keys -t {{tmux_session}} 'python3 -m http.server --bind 0.0.0.0 {{port}} --directory /var/www/html &' C-m
        {% endfor %}

tmux send-keys -t {{tmux_session}} 'exit' C-m

    {% endif %} {# RED and YELLOW VRFs #}
{% endfor %} {# namespaces #}

{# Multicast #}

{% set commands  = [
"# mcast sender (initiator = client = -c)",
"# **By default, iPerf sets the DF bit** so one must ensure that the packet length is **smaller than the tunnel MTU** by using '-l 1000'",
"# -c= client, -u = udp, -b = bandwidth,  -t = time in seconds to transmit, -T = TTL (otherwise default to 1 for mcast)",
"MCAST_GROUP=\$1",
"iperf -u -l 1000 -b 8k -t 600 -T 10 -c \${MCAST_GROUP}"
] %}

{% set filename = "/root/mcast_sender.sh" %}
echo -n "" > {{filename}}
{% for command in commands %}
  echo -e "{{command|safe}}" >> {{filename}}
{% endfor %}

chmod a+x {{filename}}


{% set commands  = [
"# mcast receiver (listener = server -s)",
"# **By default, iPerf sets the DF bit** so one must ensure that the packet length is **smaller than the tunnel MTU** by using '-l 1000'",
"# -s= server, -u = udp, -l = read buffer length, -i= pause interval in sec, -B = bind to mcast@",
"MCAST_GROUP=\$1",
"iperf -s -u -l 1000 -i 1 -B \${MCAST_GROUP}"
] %}

{% set filename = "/root/mcast_receiver.sh" %}
echo -n "" > {{filename}}
{% for command in commands %}
  echo -e "{{command|safe}}" >> {{filename}}
{% endfor %}

chmod a+x {{filename}}


