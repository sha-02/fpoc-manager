{% if vrf_aware_overlay %}
# static route updates for VRF

{% if vrf_ria == 'nat_origin' %}

# Default route for the CE VRFs => DIA+RIA via the inter-vrf link to reach the Internet/WAN VRF (index = 10+x)

    config router static
        {% for name, isegs in inter_segments.items() %}
            edit {{10+loop.index0}}
                set device "{{name}}1"
                set gateway {{isegs[0].ip}}
                # same distance as the SD-WAN default-route
                set distance 1
                set comment "VRF-{{isegs[1].vrfid}} default-route for Internet Access (DIA+RIA)"
            next
        {% endfor %}
    end

{% endif %} {# nat_origin #}


{#-------------------------------  Everything below is ONLY for preserve_origin ------------------------------------ #}

{% if vrf_ria == 'preserve_origin' %}

# Since we are doing RIA for CE VRFs, we cannot use an sdwan default route: FOS refuses to create another default static
# route over a tunnel if there exists an sdwan static route over "INTERNET" zone
# So we need to individually create a default route over each underlay (internet access in vrf_wan)
# and, possibly (not sure), over each overlay tunnel (in vrf_pe)

# Default routes for the WAN VRF replacing the swan default route: set sdwan-zone "INTERNET" "VPN"

{% set internets = [
    { 'route_index': 2, 'interface': wan.inet1.name, 'gateway': wan.inet1.subnet~".254" },
    { 'route_index': 3, 'interface': wan.inet2.name, 'gateway': wan.inet2.subnet~".254" }
    ] -%}

{% set ria_overlays = [
    { 'route_index': 4, 'interface': 'H1_MPLS' },
    { 'route_index': 5, 'interface': 'H2_MPLS' }
    ] -%}

config router static
    delete 2
    {{ "delete 3" if bgp_design == 'per-overlay' }}
    {{ "delete 4" if bgp_design == 'per-overlay' }}
    {{ "delete 5" if bgp_design == 'per-overlay' }}
end

config router static
    {% for internet in internets %}
        edit {{internet.route_index}}
            set device "{{internet.interface}}"
            set gateway {{internet.gateway}}
            set priority 1
            set comment "VRF-{{vrf_wan}} default-route for Direct Internet Access (DIA)"
        next
    {% endfor %}
end

# Default routes for the CE VRFs => DIA via the inter-vrf links to reach the Internet/WAN VRF (index = 10+x)

config router static
    {% for name, isegs in inter_segments.items() %}
        edit {{10+loop.index0}}
            set device "{{name}}1"
            set gateway {{isegs[0].ip}}
            # same distance as the SD-WAN default-route
            set distance 1
            set comment "VRF-{{isegs[1].vrfid}} default-route for Direct Internet Access (DIA)"
        next
    {% endfor %}
end

# Default routes for CE VRFs => RIA over the tunnels (index = 100+x)

{# Jinja namespace is used due to the scope of variables in Jinja 'for' loops #}
{# Inspired from: https://stackoverflow.com/questions/4870346/can-a-jinja-variables-scope-extend-beyond-in-an-inner-block #}
{% set route = namespace(index=100) %}
config router static
    {% for seg in vrf_segments.values() %} {# for each VRF of each vrf_segments #}
        {% for overlay in ria_overlays %} {# create a default route over each MPLS tunnel #}
            edit {{route.index}}
                set device "{{overlay.interface}}"
                set vrf {{seg.vrfid}}
                set distance 1
                set comment "VRF-{{seg.vrfid}} default-route for Remote Internet Access (RIA)"
            next

            {% set route.index = route.index + 1 %}
        {% endfor %}
    {% endfor %}
end

{% endif %} {# perserve_origin #}

{% endif %} {# VRF segmentation #}
