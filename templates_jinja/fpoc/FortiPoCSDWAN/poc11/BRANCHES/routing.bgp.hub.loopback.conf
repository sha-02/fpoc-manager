{% if bgp_design == 'on_loopback' %}
###############################################################################################################
# BGP on loopback to Hub

# local-out BGP session cannot follow SDWAN rule so the BGP session is established
# on top of one of the overlays and cannot pro-actively react to the degradation
# of this overlay ('brownout switchover' on high latency, or high packet loss or
# low available bandwitdh)
# The case of "overlay down" ('blackout switchover') is covered however.
# BGP session will seamlessly switchover to another available overlay by making
# the BGP hold-timer longer than DPD.
# When overlay goes down, BGP session is expected to switchover seamlessly, no problem, no flap

# BGP timers ( keepalive-timer , holdtime-timer )
# BGP timers are an important consideration in this routing design!
# Traditionally, we try to lower these timers as much as possible, in order to speed up BGP convergence
# caused by failure of a link. This won’t be our goal here!
# Since we build just a single BGP session between the Edge device and each Hub, we must ensure
# that this BGP session can seamlessly switchover from one overlay to another, in case when the overlay
# currently being used by BGP goes down.
# The session can switchover when the route to the Hub’s loopback address via the broken overlay disappears.
# This will happen automatically, when DPD brings the tunnel down.
# Which means that DPD timers must be shorter than BGP Hold-Time!
#
# Is it a problem to have such slow BGP timers? Not in this design. And here is why.
# As noted above, there will be a single BGP route for each LAN prefix in the network, recursively resolved
# via all the paths available at the moment. This BGP route remains valid, as long as there is at least one
# path to the destination! Therefore, fast withdrawal of that BGP route is not much of an issue for us. We
# should rather focus on fast withdrawal of the unhealthy path via which that BGP route can be resolved.
# Path health will be monitored by the SD-WAN. This is no longer the responsibility of BGP. Hence, we do
# not require aggressive BGP timers and/or additional protocols such as BFD.

# Tag-based resolution ('merge') is required with this design:
# - on branches to which shortcuts can be established (branches with ADVPN),
# - on branches which can reach another branch (or DC from other region) via multiple Hubs

{%- set local_ASN = 65000 + region_id -%}

{%- set dc1 = datacenter.first -%}
{% set dc2 = datacenter.second %}

{# No longer needed when combining BGP corporate summaries (thanks to dynBGP) and ADVPNv2.0 #}
#config router route-map
#    edit "H1_TAG"
#        config rule
#            edit 1
#                set set-tag 1
#            next
#        end
#    next
#    edit "H2_TAG"
#        config rule
#            edit 1
#                set set-tag 2
#            next
#        end
#    next
#end

config router bgp
    set as {{local_ASN}}
    set router-id {{loopback}}
    set keepalive-timer 15
    set holdtime-timer 45
    set ibgp-multipath enable

    set recursive-next-hop enable
#    set tag-resolve-mode merge   {# no longer needed with ADVPNv2.0 #}

    config neighbor
        edit "{{dc1.loopback}}"
            set interface "lo-BGP"
            set update-source "lo-BGP"
            set remote-as {{local_ASN}}
#            set route-map-in "H1_TAG"    {# No longer needed when combining BGP corporate summaries (thanks to dynBGP) and ADVPNv2.0 #}
            set connect-timer 1
            set advertisement-interval 1
            set soft-reconfiguration enable
            set next-hop-self enable
        next
        edit "{{dc2.loopback}}"
            set interface "lo-BGP"
            set update-source "lo-BGP"
            set remote-as {{local_ASN}}
#            set route-map-in "H2_TAG"    {# No longer needed when combining BGP corporate summaries (thanks to dynBGP) and ADVPNv2.0 #}
            set connect-timer 1
            set advertisement-interval 1
            set soft-reconfiguration enable
            set next-hop-self enable
        next
    end
    config network
        edit 1
            {{ "set prefix "~lan.network if FOS < 7_006_000 }}
            {{ "set prefix-name LAN" if FOS >= 7_006_000 }}
        next
    end
end

{% endif %} {# BGP on loopback #}