{% if vrf_aware_overlay %}
# BGP updates for VRF
#
# VRF {{vrf_pe}} is used as PE VRF to carry vpnv4 prefixes for the CE VRFs
{% if vrf_pe == vrf_blue -%}
# It is also used to carry IPv4 prefixes for port5 LAN which is in same VRF as the PE VRF
{% endif -%}
# For VPNv4 RD and RT we DO NOT use the local ASN, we use 65000 for all devices from all regions
#
# Internet access:
# VRF {{vrf_wan}} contains the Internet underlays and the default routes to Internet
{% if vrf_wan == vrf_blue -%}
# SEGMENT_0 (port5) being in the WAN VRF it has native access to the Internet
{% endif -%}
# CE VRFs must send their traffic via the WAN VRF to access the Internet
# It requires:
# 1- configuring a static default-route in each CE VRF to send Internet traffic into WAN VRF (via an inter-vrf link)
# 2- ensuring that the traffic ingressing WAN VRF from CE VRF is not rejected by RPF
#
# There are two ways to deal with point 2-:
# A- NAT the traffic when it enters WAN VRF with the IP@ assigned inter-vrf link on PE side
# B- Configure route leaking from each CE VRF to the WAN VRF
#
# Option A- is only possible if the WAN VRF is <> 0
# Option B- breaks the "VRF isolation" by merging all subnets from all CE VRFs in WAN VRF (no overlap is possible)
#
{% if vrf_wan != 0 -%}
# In this PoC the WAN VRF is not in VRF 0 so NATing (option A) is done.
{% else -%}
# In this PoC the WAN VRF is in VRF 0 so NATing (option A) is not possible. Route leaking is done instead.
# We just want the subnets of the CE VRFs to be in the RIB of the WAN VRF. There is no need to re-advertise them.
# This is controlled with route-map-out "RM_DENY_CEVRF" which prevents prefixes leaked from the CE VRFs to be
# advertised as ipv4 prefixes (route-map-out) in the WAN VRF.
#
# Technically, only leak from CE VRF to WAN VRF is needed to avoid RPF failure when packets from CE VRF reaches WAN VRF
# But FOS requires to configure bidirectional leaking VRFx<->VRFy otherwise the BGP next-hop is marked as inaccessible
# Leaking from CE-VRF to WAN-VRF is done only for the local LAN subnet of VRFx (tagged as 32768 -for "LOCAL"- with route-map
# "RM_SET_CEVRF_LOCAL_TAG"), other prefixes in CE VRF learned from remote peers are not leaked to WAN VRF.
# Pseudo-leaking from WAN VRF to CE VRF is configured due to the "bidirectional requirement" but route-map "RM_DENY_ALL"
# is used to block all prefixes so no leaking occurs between WAN VRF -> CE VRF
#
    config router route-map
        edit "RM_SET_CEVRF_LOCAL_TAG"
            config rule
                edit 1
                    set set-tag 32768
                next
            end
        next
        edit "RM_CEVRF_LOCAL_TAG_ONLY"
            config rule
                edit 1
                    set match-tag 32768
                next
            end
        next
        edit "RM_DENY_CEVRF"
            config rule
                edit 1
                    set action deny
                    set match-tag 32768
                next
                edit 2
                next
            end
        next
        edit "RM_DENY_ALL"
            config rule
                edit 1
                    set action deny
                next
            end
        next
    end
{% endif -%}

{%- set dc1 = datacenter.first -%}
{%- set dc2 = datacenter.second -%}

# Dynamic BGP

config router bgp
    config neighbor-group
        edit {{"ADVPN_"~region|upper}}
            set next-hop-self-vpnv4 enable
            set soft-reconfiguration-vpnv4 enable
        next
        edit "ADVPN_REGIONS"
            set next-hop-self-vpnv4 enable
            set soft-reconfiguration-vpnv4 enable
            set route-map-out-vpnv4 "LOCAL_LAN_ONLY"
        next
    end
end

# REGIONS

config router bgp
    config neighbor
        edit "{{dc1.loopback}}"
            set next-hop-self-vpnv4 enable
            set route-map-in-vpnv4 "H1_TAG"
            {{ "set route-map-out RM_DENY_CEVRF" if vrf_wan==0 }}
            set soft-reconfiguration-vpnv4 enable
        next
        edit "{{dc2.loopback}}"
            set next-hop-self-vpnv4 enable
            set route-map-in-vpnv4 "H2_TAG"
            {{ "set route-map-out RM_DENY_CEVRF" if vrf_wan==0 }}
            set soft-reconfiguration-vpnv4 enable
        next
    end
end

# networks

config router bgp
    config network
        {% for name, segment in vrf_segments.items() %}
            {% if name != "LAN" %}  {# LAN(SEG0/port5/lan.port) is already defined above with bgp config #}
                edit "{{10+loop.index0}}"
                    set prefix {{segment.subnet}} {{segment.mask}}
                    {{ "set route-map RM_SET_CEVRF_LOCAL_TAG" if vrf_wan==0 }}
                    set route-map "SET_LOCAL_LAN"
                next
            {% endif %}
        {% endfor %}
    end
end

# VRFs

config router bgp
    config vrf
        edit "{{vrf_pe}}"
            set role pe
             {% if vrf_wan==0 %} {# SNAT is not possible for DIA via PE VRF0 so leak is required #}
                config leak-target
                {% for name, isegs in inter_segments.items() %}
                    edit "{{isegs[1].vrfid}}"
                        set route-map "RM_DENY_ALL"
                        set interface "{{name}}0"
                    next
                {% endfor %}
                end
            {% endif %}
        next
        {% for segment in vrf_segments.values() %}
            {% if segment.vrfid != vrf_pe %}
                edit "{{segment.vrfid}}"
                    set role ce
                    set rd "65000:{{segment.vrfid}}"
                    set export-rt "65000:{{segment.vrfid}}"
                    set import-rt "65000:{{segment.vrfid}}"
                    {% if vrf_wan==0 %} {# SNAT is not possible for DIA via PE VRF0 so leak is required #}
                         config leak-target
                             edit "{{vrf_pe}}"
                                 set route-map "RM_CEVRF_LOCAL_TAG_ONLY"
                                 {% for name, iseg in inter_segments.items() %}
                                     {% if segment.vrfid == iseg[1].vrfid %}
                                         set interface "{{name}}1"
                                     {% endif %}
                                 {% endfor %}
                             next
                         end
                     {% endif %}
            next
            {% endif %}
        {% endfor %}
    end
end

{% endif %} {# VRF-aware overlay #}
