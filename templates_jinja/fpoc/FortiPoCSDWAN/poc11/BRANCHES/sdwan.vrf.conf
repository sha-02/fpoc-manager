{% if vrf_aware_overlay %}

{% extends "./sdwan.conf" %} {# shared jinja variables for SDWAN #}
{% block myconfig %}

# SDWAN updates for VRFs

# RIA with multi-DIA (multiple Internet accesses) is challenging
#
# For explanation, let's consider LAN_BLUE (VRF 13) and WAN VRF (VRF1) and a single inter-vrf link BLUE_ between the two
#
# 'only DIA' is simple: single default route in VRF13 over BLUE_1, no SDWAN needed
# 'only RIA' is simple: single default route in VRF13 over H1_MPLS/H2_MPLS, simple SDWAN between H{1|2}_MPLS
# 'RIA with single-DIA': one default route over BLUE_1, two default routes over H{1|2}_MPLS,
#                        SDWAN HC 198.18.8.8 over BLUE_1, H{1|2}_MPLS
#                        SDWAN rule with preference (BLUE_1, H1_MPLS, H2_MPLS)
#
# 'RIA with multi-DIA' is more complex.
# VRF 13 has multiple default routes:
#   - one static default route over inter-vrf link BLUE_1 for DIA via the WAN VRF
#   - multiple static default routes over the tunnels for RIA (H1_MPLS, H2_MPLS)
# RIA traffic can be routed directly to the RIA tunnels within VRF 13 itself, easy...
# But DIA traffic has to be forwarded via BLUE_1 to WAN-VRF
# The problem is that the WAN-VRF has two Internet accesses: Internet_1 and Internet_2
# In VRF13 there is only a single link to reach Internet: BLUE_1
# We need to measure the SLA for DIA and for RIA because we need to prefer DIA and switchover to RIA if needed
# However if we configure a single SLA health-check for Internet server (198.18.8.8) over BLUE_1 then we don't know
# if this HC traffic will egress over Internet_1 or Internet_2 once in the WAN-VRF
# We cannot measure the quality of both Internet_1 and Internet_2 with a single SLA HC sent over BLUE_1
# If we do so and the traffic egress via Internet_1 in WAN-VRF then, as soon as Internet_1 SLA is BAD, then traffic
# will stop going DIA over BLUE_1 and will go RIA over the tunnels in VRF 13
# Basically, if only one Internet link is bad in the WAN-VRF then VRF 13 switches to RIA instead of continuing to do
# DIA via the remaining good Internet link in VRF-WAN
# We need a way to measure the SLA of both Internet_1 and Internet_2 from the BLUE VRF
#
# There are two solutions:
# - nat_origin: customer accepts that the IP@ of the origin of the traffic is NATed when sent inside RIA tunnel
# - preserve_origin: customer wants to generate a traffic log on the Hub which contains the origin IP of the RIA traffic
#                    and therefore refuses that RIA traffic be NATed by the Branch
#
#
# PRESERVE_ORIGIN
# ===============
#
# two inter-vrf links between BLUE VRF and WAN VRF: each one to reflect the actual status of INET1 and INET2
# Drawback: with 2 Internet accesses and 3 VRFs then the internet server (198.18.8.8) is probed six times !!!
# BLUE VRF (13) has two inter-vrf link with the WAN/Internet VRF (32): BLUE_ and BLUE2_
# BLUE_ is linked to Internet_1 via a policy route which forces BLUE_ health-check to route out Internet_1
# likewise BLUE2_ is linked to Internet_2 via a policy route which forces BLUE2_ health-check to route out Internet_2
#
# I originally tried with a single inter-vrf link between BLUE and WAN VRF but it was limited
# Below is the explanation just for reference
#     My initial solution: single inter-vrf link between BLUE VRF and WAN VRF and two SLA HC (SLA_internet1, SLA_internet2)
#     Conclusion: it does not allow to manage complex preference for my Internet_HighPrio|MedPrio|lowPrio rules so I gave up on this one
#                 it is still the "solution" applied to the original FortiPoCSDWAN
#                 for new FortiPoCSDWAN2, I switched to another solution
#     Principle:
#     was to sent SLA HC to two distinct servers: 198.18.8.8 and 198.18.8.9
#     The first server is used to measure the SLA of the RIA tunnels, Internet_1, Internet_2, plus BLUE_1 "via" Internet_1
#     The second server is used to measure the SLA of BLUE_1 "via" Internet_2
#     HC for .8 over Internet_1 and Internet_2 is done by the WAN-VRF
#     HC for .8 over the RIA tunnels is done by the PE VRF but these HC measurements are valid for all VRFs since tunnels are multi-vrf
#     HC for .8 and .9 over BLUE_1 are done by the VRF 13
#     Two policy routes are used in the WAN-VRF to ensure that the HC received from BLUE_0 egresses over Internet_1 for .8
#     and egresses over Internet_2 for .9
#     These two HC (SLA_Internet and SLA_Internet2) allows to measure the quality of Internet_1 and Internet_2 from the standpoint
#     of VRF13 via BLUE_1
#     "set sla-compare-method number" is mandatory to have the desired behavior:
#     . If Internet_1 goes off SLA, Internet traffic from VRF13 stays DIA over BLUE_1 and is routed by WAN-VRF over Internet_2
#     . If both Internet_1 and _2 are off SLA, Internet traffic from VRF13 goes RIA via its local tunnels in VRF13
#
#
# NAT_ORIGIN
# ===========
#
# It is preferable to keep a single inter-vrf link between BLUE and WAN VRF and push all DIA+RIA to WAN VRF
# This requires to NAT the traffic on the Branch before sending it for RIA towards the WAN VRF
# It means that the origin IP is not preserved and may not suit the customer
#
# The solution consists in having a single default route in VRF13 over BLUE_1 and push all Internet traffic
# for VRF13 to the WAN-VRF which was also the PE VRF: Internet_1, Internet_2 and all tunnels were in this WAN+PE VRF.
# The WAN+PE VRF will take care of deciding whether traffic goes DIA or RIA since it has all links and all HC
#
# In BLUE VRF: all DIA/RIA Internet traffic is sent over BLUE_1 and is NATed with BLUE_1 IP@
# In PE/WAN VRF: all DIA/RIA traffic from BLUE_0 is routed out DIA or RIA and is NATed in both cases:
#                - in DIA case it is NATed with the public IP@ of Internet_{1|2}
#                - in RIA case it is NATed with an IP pool containing the Lo-BGP of the Branch
#
# Internet traffic, be it DIA or RIA, is always subbject to double NAT: out BLUE_1 and out Internet_{1|2}, H{1|2}_MPLS
# No SDWAN needed for BLUE VRF
# A system zone "INTERNET_" is created inside of an SDWAN zone "INTERNET_"

{% if vrf_ria == 'nat_origin' %}
    {% set zone_members = [] -%}
    {% for name in inter_segments.keys() -%}
        {% do zone_members.append(name+'1') -%}
    {% endfor -%}

    config system zone
        edit "INTERNET_"
            set interface {{zone_members|join(' ')}}
        next
    end
{% endif %}


{#-------------------------------  Everything below is ONLY for preserve_origin ------------------------------------ #}

{% if vrf_ria == 'preserve_origin' %}

##### SD-WAN zones -----------------------------------------------

config system sdwan
    config zone
        edit "INTERNET_"
        next
    end
end

##### SD-WAN members -----------------------------------------------

{# Various lists of sdwan members # }

{# DIA - CE VRF members linked to Internet_1 and CE VRF members linked to Internet_2  #}

{% set internet1_vrf_member_indexes = [] -%}
{% set internet1_vrf_member_names = [] -%}
{% set internet2_vrf_member_indexes = [] -%}
{% set internet2_vrf_member_names = [] -%}
{% for name in inter_segments.keys() -%}
    {% if name.endswith('2_') -%}
        {% do internet2_vrf_member_indexes.append(30+loop.index0) -%}
        {% do internet2_vrf_member_names.append(name) -%}
    {% else -%}
        {% do internet1_vrf_member_indexes.append(30+loop.index0) -%}
        {% do internet1_vrf_member_names.append(name) -%}
    {% endif -%}
{% endfor -%}

{# DIA - CE VRFs members linked to both Internet_1 and Internet_2 #}

{% set internet_vrf_member_indexes = internet1_vrf_member_indexes + internet2_vrf_member_indexes -%}
{% set internet_vrf_member_names = internet1_vrf_member_names + internet2_vrf_member_names -%}


# Internet DIA over the inter-vrf links from the LAN VRFs (YELLOW_1, RED_1, and possibly BLUE_1)

config system sdwan
    config members
    {% for vrf_member_index in internet_vrf_member_indexes %}
        edit {{vrf_member_index}}
            set interface "{{internet_vrf_member_names[loop.index0]}}1"
            set zone "INTERNET_"
        next
    {% endfor %}
    end
end

{# DIA - All members for Internet_1 (CE VRFs and WAN VRF) #}
{% set internet1_member_indexes = [1] + internet1_vrf_member_indexes -%}

{# DIA - All members for Internet_2 (CE VRFs and WAN VRF) #}
{% set internet2_member_indexes = [2] + internet2_vrf_member_indexes -%}

{# MPLS RIA members #}
{% set mpls_ria_member_indexes = [] -%}
{% for ov in ipsec_overlays -%} {# Add MPLS RIA tunnels #}
    {% if 'MPLS' in ov.interface -%}
        {% do mpls_ria_member_indexes.append(ov.id) -%}
    {% endif -%}
{% endfor -%}


### SD-WAN health-checks -----------------------------------------------

config system sdwan
    config health-check
        edit "SLA_Internet"
            set members {{internet1_member_indexes|join(' ')}} {{internet2_member_indexes|join(' ')}} {{mpls_ria_member_indexes|join(' ')}}
        next
    end
end

### SD-WAN Internet rules -----------------------------------------------

config system sdwan
    config service
        edit 10 {# "Internet_HighPriority" #}
            set priority-members {{internet1_member_indexes|join(' ')}} {{mpls_ria_member_indexes|join(' ')}} {{internet2_member_indexes|join(' ')}}
        next
        edit 11 {# "Internet_MedPriority" #}
            set priority-members {{internet1_member_indexes|join(' ')}} {{internet2_member_indexes|join(' ')}} {{mpls_ria_member_indexes|join(' ')}}
        next
        edit 12 {# "Internet_LowPriority" #}
            set priority-members {{internet2_member_indexes|join(' ')}} {{internet1_member_indexes|join(' ')}}
        next
    end
end

{% endif %} {# preserve_origin #}

{% endblock %} {# sdwan_vrf #}

{% endif %} {# VRF segmentation #}
