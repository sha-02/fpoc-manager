{% if vrf_aware_overlay %}

{% extends "./sdwan.conf" %} {# shared jinja variables for SDWAN #}
{% block sdwan_vrf %}

# SDWAN updates for VRFs

# with DIA and vrf_aware_overlay the config is quite complex.
# For explanation, let's consider LAN_BLUE in VRF 3 and WAN VRF in VRF 32
# VRF 3 has multiple default routes:
#   - one static default route over the inter-vrf link BLUE_1 for DIA via the WAN VRF
#   - multiple static default routes over the tunnels for RIA (MPLS tunnels and possibly INET tunnels)
# RIA traffic can be routed directly to the RIA tunnels within VRF 3 itself, easy...
# But DIA traffic has to be forwarded via BLUE_1 to WAN-VRF
# The problem is that the WAN-VRF has two Internet accesses: Internet_1 and Internet_2
# In VRF3 there is only a single link to reach Internet: BLUE_1
# We need to measure the SLA for DIA and for RIA because we need to prefer DIA and switchover to RIA if needed
# However if we configure a single SLA health-check for Internet server (198.18.8.8) over BLUE_1 then we don't know
# if this HC traffic will egress over Internet_1 or Internet_2 once in the WAN-VRF
# We cannot measure the quality of both Internet_1 and Internet_2 with a single SLA HC sent over BLUE_1
# If we do so and the traffic egress via Internet_1 in WAN-VRF then, as soon as Internet_1 SLA is BAD, then traffic
# will stop going DIA over BLUE_1 and will go RIA over the tunnels in VRF 3
# Basically, if only one Internet link is bad in the WAN-VRF then VRF 3 switches to RIA instead of continuing to do
# DIA via the remaining good Internet link in VRF-WAN
# We need a way to measure the SLA of both Internet_1 and Internet_2 from the BLUE VRF
#
#
# My initial solution: single inter-vrf link between BLUE VRF and WAN VRF and two SLA HC (SLA_internet1, SLA_internet2)
# Conclusion: it does not allow to manage complex preference for my Internet_HighPrio|MedPrio|lowPrio rules so I gave up on this one
#             it is still the "solution" applied to the original FortiPoCSDWAN
#             for new FortiPoCSDWAN2, I switched to another solution
# Principle:
# was to sent SLA HC to two distinct servers: 198.18.8.8 and 198.18.8.9
# The first server is used to measure the SLA of the RIA tunnels, Internet_1, Internet_2, plus BLUE_1 "via" Internet_1
# The second server is used to measure the SLA of BLUE_1 "via" Internet_2
# HC for .8 over Internet_1 and Internet_2 is done by the WAN-VRF
# HC for .8 over the RIA tunnels is done by the PE VRF but these HC measurements are valid for all VRFs since tunnels are multi-vrf
# HC for .8 and .9 over BLUE_1 are done by the VRF 3
# Two policy routes are used in the WAN-VRF to ensure that the HC received from BLUE_0 egresses over Internet_1 for .8
# and egresses over Internet_2 for .9
# These two HC (SLA_Internet and SLA_Internet2) allows to measure the quality of Internet_1 and Internet_2 from the standpoint
# of VRF3 via BLUE_1
# "set sla-compare-method number" is mandatory to have the desired behavior:
# . If Internet_1 goes off SLA, Internet traffic from VRF3 stays DIA over BLUE_1 and is routed by WAN-VRF over Internet_2
# . If both Internet_1 and _2 are off SLA, Internet traffic from VRF3 goes RIA via its local tunnels in VRF3
#
# My new solution: two inter-vrf links between BLUE VRF and WAN VRF: each one to reflect the actual status of INET1 and INET2
# Drawback: with 2 Internet accesses and 3 VRFs then the internet server (198.18.8.8) is probed six times !
# BLE VRF (3) has two inter-vrf link with the WAN/Internet VRF (32): BLUE_I1 and BLUE_I2
# BLUE_I1 is linked to Internet_1 via a policy route which forces BLUE_I1 health-check to route out Internet_1
# likewise BLUE_I2 is linked to Internet_2 via a policy route which forces BLUE_I2 health-check to route out Internet_2
#
# Yet another alternative solution: single inter-vrf link between CE VRF and WAN VRF and push all DIA+RIA to WAN VRF
#
# I tried another solution which consists in having a single default route in VRF3 over BLUE_1 and push all Internet traffic
# for VRF3 to the WAN-VRF which was also the PE VRF: Internet_1, Internet_2 and all tunnels were in this WAN+PE VRF.
# I though that the WAN+PE VRF would take care of deciding whether traffic goes DIA or RIA since it has all links and all HC
# The problem arises when Internet traffic from VRF3 must go RIA because both Internet links are off SLA
# When it happens, the Internet traffic is SNATed in VRF3 with the inter-vrf link IP address (10.254.254.x), it ingresses
# the WAN+PE VRF in BLUE_0 and is sent to the desired RIA tunnel (say, H1_MPLS). Problem is on the other side, on the Hub.
# The Hub receives in the PE VRF (VRF 32 !!!) the SNATed traffic from VRF3.
# The traffic fails RPF.
# I could have tweaked the Hub to accept traffic from 10.254.254.0/24 (inter-vrf subnets on the Branches) but this is
# ugly for multiple reasons:
# 1- conceptually it means that Internet traffic from VRF3 over corporate tunnels is carried in another VRF (32) -- this one is a "ok, why not... it's similar to DIA"
# 2- it exposes the inter-vrf subnet of the branch: they should be local and could even be in link-local subnet 169.254.x.x
# 3- the logs generated on the Hub would not allow to know which hosts were doing RIA because they are all SNATed -- this one is the most problematic
# So I stopped going this direction
# Note that Dmitry took this direction: he sends DIA and RIA via inter-vrf to PE+WAN-VRF (same VRF 32)
# then the choice of DIA or RIA is made in VRF32 to go DIA or RIA
# He probably fixed point 2- RPF with default-route on Hub towards tunnels
# He takes assumption that point 3- NAT is accepted by customer which is where I don't think it would be accepted
# Anyway, this second option exists and the limitation/drawbacks are listed above.
# So, need it be, I can go this route for a specific project
#

##### SD-WAN zones -----------------------------------------------

config system sdwan
    config zone
        edit "INTERNET_"
        next
    end
end

##### SD-WAN members -----------------------------------------------

{# Various lists of sdwan members # }

{# DIA - CE VRF members linked to Internet_1 and CE VRF members linked to Internet_2  #}

{% set internet1_vrf_member_indexes = [] -%}
{% set internet1_vrf_member_names = [] -%}
{% set internet2_vrf_member_indexes = [] -%}
{% set internet2_vrf_member_names = [] -%}
{% for name in inter_segments.keys() -%}
    {% if '_I1_' in name -%}
        {% do internet1_vrf_member_indexes.append(30+loop.index0) -%}
        {% do internet1_vrf_member_names.append(name) -%}
    {% endif -%}
    {% if '_I2_' in name -%}
        {% do internet2_vrf_member_indexes.append(30+loop.index0) -%}
        {% do internet2_vrf_member_names.append(name) -%}
    {% endif -%}
{% endfor -%}

{# DIA - CE VRFs members linked to both Internet_1 and Internet_2 #}

{% set internet_vrf_member_indexes = internet1_vrf_member_indexes + internet2_vrf_member_indexes -%}
{% set internet_vrf_member_names = internet1_vrf_member_names + internet2_vrf_member_names -%}


# Internet DIA over the inter-vrf links from the LAN VRFs (YELLOW_1, RED_1, and possibly BLUE_1)

config system sdwan
    config members
    {% for vrf_member_index in internet_vrf_member_indexes %}
        edit {{vrf_member_index}}
            set interface "{{internet_vrf_member_names[loop.index0]}}1"
            set zone "INTERNET_"
        next
    {% endfor %}
    end
end

{# DIA - All members for Internet_1 (CE VRFs and WAN VRF) #}
{% set internet1_member_indexes = [1] + internet1_vrf_member_indexes -%}

{# DIA - All members for Internet_2 (CE VRFs and WAN VRF) #}
{% set internet2_member_indexes = [2] + internet2_vrf_member_indexes -%}

{# MPLS RIA members #}
{% set mpls_ria_member_indexes = [] -%}
{% for ov in ipsec_overlays -%} {# Add MPLS RIA tunnels #}
    {% if 'MPLS' in ov.interface -%}
        {% do mpls_ria_member_indexes.append(ov.id) -%}
    {% endif -%}
{% endfor -%}


### SD-WAN health-checks -----------------------------------------------

config system sdwan
    config health-check
        edit "SLA_Internet"
            set members {{internet1_member_indexes|join(' ')}} {{internet2_member_indexes|join(' ')}} {{mpls_ria_member_indexes|join(' ')}}
        next
    end
end

### SD-WAN Internet rules -----------------------------------------------

config system sdwan
    config service
        edit 10 {# "Internet_HighPriority" #}
            set priority-members {{internet1_member_indexes|join(' ')}} {{mpls_ria_member_indexes|join(' ')}} {{internet2_member_indexes|join(' ')}}
        next
        edit 11 {# "Internet_MedPriority" #}
            set priority-members {{internet1_member_indexes|join(' ')}} {{internet2_member_indexes|join(' ')}} {{mpls_ria_member_indexes|join(' ')}}
        next
        edit 12 {# "Internet_LowPriority" #}
            set priority-members {{internet2_member_indexes|join(' ')}} {{internet1_member_indexes|join(' ')}}
        next
    end
end

{% endblock %}

{% endif %} {# VRF segmentation #}

