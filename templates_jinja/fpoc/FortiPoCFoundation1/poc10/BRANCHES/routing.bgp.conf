{% if FMG_FORTIGATE_ID %}
    {% import 'SETTINGS.DEVICES' as SETTINGS with context %}

    {% set branch_id = SETTINGS.DEVICES[FMG_FORTIGATE_ID].branch_id %}
    {% set lan = SETTINGS.DEVICES[FMG_FORTIGATE_ID].lan %}
    {% set cross_region_advpn = SETTINGS.DEVICES[FMG_FORTIGATE_ID].cross_region_advpn %}
    {% set datacenter = SETTINGS.DEVICES[FMG_FORTIGATE_ID].datacenter %}
    {% set FOS = SETTINGS.DEVICES[FMG_FORTIGATE_ID].FOS %}
    {% set region = SETTINGS.DEVICES[FMG_FORTIGATE_ID].region %}
    {% set bidir_sdwan = SETTINGS.DEVICES[FMG_FORTIGATE_ID].bidir_sdwan %}
    {% set vrf_aware_overlay = SETTINGS.DEVICES[FMG_FORTIGATE_ID].vrf_aware_overlay %}
    {% set loopback = SETTINGS.DEVICES[FMG_FORTIGATE_ID].loopback %}
{% endif %}

###############################################################################################################
# BGP peerings over VPN overlays

{% set local_ASN = '' %} {# Initialize variables outside of a 'if' block to avoid FMG creating metadata #}

{# Define which ASN is for local region and which ASN is for the remote region #}
# FOS >= 7.0: always eBGP for cross-region

{% if region == 'West' -%}
    {%- set local_ASN = 65001 -%}
{%- else -%} {# East region #}
    {%- set local_ASN = 65002 -%}
{%- endif -%}

{%- set dc1 = datacenter.first -%}
{%- set dc2 = datacenter.second -%}

# local-out BGP session cannot follow SDWAN rule so the BGP session is established
# on top of one of the overlays and cannot pro-actively react to the degradation
# of this overlay ('brownout switchover' on high latency, or high packet loss or
# low available bandwitdh)
# The case of "overlay down" ('blackout switchover') is covered however.
# BGP session will seamlessly switchover to another available overlay by making
# the BGP hold-timer longer than DPD.
# When overlay goes down, BGP session is expected to switchover seamlessly, no problem, no flap

# BGP timers ( keepalive-timer , holdtime-timer )
# BGP timers are an important consideration in this routing design!
# Traditionally, we try to lower these timers as much as possible, in order to speed up BGP convergence
# caused by failure of a link. This won’t be our goal here!
# Since we build just a single BGP session between the Edge device and each Hub, we must ensure
# that this BGP session can seamlessly switchover from one overlay to another, in case when the overlay
# currently being used by BGP goes down.
# The session can switchover when the route to the Hub’s loopback address via the broken overlay disappears.
# This will happen automatically, when DPD brings the tunnel down.
# Which means that DPD timers must be shorter than BGP Hold-Time!
#
# Is it a problem to have such slow BGP timers? Not in this design. And here is why.
# As noted above, there will be a single BGP route for each LAN prefix in the network, recursively resolved
# via all the paths available at the moment. This BGP route remains valid, as long as there is at least one
# path to the destination! Therefore, fast withdrawal of that BGP route is not much of an issue for us. We
# should rather focus on fast withdrawal of the unhealthy path via which that BGP route can be resolved.
# Path health will be monitored by the SD-WAN. This is no longer the responsibility of BGP. Hence, we do
# not require aggressive BGP timers and/or additional protocols such as BFD.

# Tag-based resolution ('merge') is required with this design:
# - on branches to which shortcuts can be established (branches with ADVPN),
# - on branches which can reach another branch (or DC from other region) via multiple Hubs

config router route-map
    edit "H1_TAG"
        config rule
            edit 1
                set set-tag 1
            next
        end
    next
    edit "H2_TAG"
        config rule
            edit 1
                set set-tag 2
            next
        end
    next
end

config router bgp
    set as {{local_ASN}}
    set router-id {{loopback}}
    set keepalive-timer 15
    set holdtime-timer 45
    set ibgp-multipath enable

    set recursive-next-hop enable
    set tag-resolve-mode merge

    config neighbor
        edit "{{dc1.loopback}}"
            set interface "lo-BGP"
            set update-source "lo-BGP"
            set remote-as {{local_ASN}}
            set route-map-in "H1_TAG"
            set connect-timer 1
            set advertisement-interval 1
            set soft-reconfiguration enable
        next
        edit "{{dc2.loopback}}"
            set interface "lo-BGP"
            set update-source "lo-BGP"
            set remote-as {{local_ASN}}
            set route-map-in "H2_TAG"
            set connect-timer 1
            set advertisement-interval 1
            set soft-reconfiguration enable
        next
    end
    config network
        edit 1
            set prefix  {{lan.subnet}} {{lan.mask}}
        next
    end
end

{% if vrf_aware_overlay %}
# VRF-aware overlay
#
# VRF {{vrf_pe}} is used as PE VRF to carry vpnv4 prefixes for the CE VRFs
{% if vrf_pe == vrf_seg0 -%}
# It is also used to carry IPv4 prefixes for port5 LAN which is in same VRF as the PE VRF
{% endif -%}
# For VPNv4 RD and RT we DO NOT use the local ASN, we use 65000 for all devices from all regions
#
# Internet access:
# VRF {{vrf_wan}} contains the Internet underlays and the default routes to Internet
{% if vrf_wan == vrf_seg0 -%}
# SEGMENT_0 (port5) being in the WAN VRF it has native access to the Internet
{% endif -%}
# CE VRFs must send their traffic via the WAN VRF to access the Internet
# It requires:
# 1- configuring a static default-route in each CE VRF to send Internet traffic into WAN VRF (via an inter-vrf link)
# 2- ensuring that the traffic ingressing WAN VRF from CE VRF is not rejected by RPF
#
# There are two ways to deal with point 2-:
# A- NAT the traffic when it enters WAN VRF with the IP@ assigned inter-vrf link on PE side
# B- Configure route leaking from each CE VRF to the WAN VRF
#
# Option A- is only possible if the WAN VRF is <> 0
# Option B- breaks the "VRF isolation" by merging all subnets from all CE VRFs in WAN VRF (no overlap is possible)
#
{% if vrf_wan != 0 -%}
# In this PoC the WAN VRF is not in VRF 0 so NATing (option A) is done.
{% else -%}
# In this PoC the WAN VRF is in VRF 0 so NATing (option A) is not possible. Route leaking is done instead.
# We just want the subnets of the CE VRFs to be in the RIB of the WAN VRF. There is no need to re-advertise them.
# This is controlled with route-map-out "RM_DENY_CEVRF" which prevents prefixes leaked from the CE VRFs to be
# advertised as ipv4 prefixes (route-map-out) in the WAN VRF.
#
# Technically, only leak from CE VRF to WAN VRF is needed to avoid RPF failure when packets from CE VRF reaches WAN VRF
# But FOS requires to configure bidirectional leaking VRFx<->VRFy otherwise the BGP next-hop is marked as inaccessible
# Leaking from CE-VRF to WAN-VRF is done only for the local LAN subnet of VRFx (tagged as 32768 -for "LOCAL"- with route-map
# "RM_SET_CEVRF_LOCAL_TAG"), other prefixes in CE VRF learned from remote peers are not leaked to WAN VRF.
# Pseudo-leaking from WAN VRF to CE VRF is configured due to the "bidirectional requirement" but route-map "RM_DENY_ALL"
# is used to block all prefixes so no leaking occurs between WAN VRF -> CE VRF
#
    config router route-map
        edit "RM_SET_CEVRF_LOCAL_TAG"
            config rule
                edit 1
                    set set-tag 32768
                next
            end
        next
        edit "RM_NONVRF0-LOCAL-TAG-ONLY"
            config rule
                edit 1
                    set match-tag 32768
                next
            end
        next
        edit "RM_DENY_CEVRF"
            config rule
                edit 1
                    set action deny
                    set match-tag 32768
                next
                edit 2
                next
            end
        next
        edit "RM_DENY_ALL"
            config rule
                edit 1
                    set action deny
                next
            end
        next
    end
{% endif -%}

    config router bgp
        config neighbor
            edit "{{dc1.loopback}}"
                set route-map-in-vpnv4 "H1_TAG"
                {{ "set route-map-out RM_DENY_CEVRF" if vrf_wan==0 }}
                set soft-reconfiguration-vpnv4 enable
            next
            edit "{{dc2.loopback}}"
                set route-map-in-vpnv4 "H2_TAG"
                {{ "set route-map-out RM_DENY_CEVRF" if vrf_wan==0 }}
                set soft-reconfiguration-vpnv4 enable
            next
        end
        config network
            {% for name, segment in vrf_segments.items() %}
                {% if name != lan.name %}  {# port5/SEG0 is already defined above with bgp config #}
                    edit "{{10+loop.index0}}"
                        set prefix {{segment.subnet}} {{segment.mask}}
                        {{ "set route-map RM_SET_CEVRF_LOCAL_TAG" if vrf_wan==0 }}
                    next
                {% endif %}
            {% endfor %}
        end
        config vrf
            edit "{{vrf_pe}}"
                set role pe
                {% if vrf_wan==0 %}
                    config leak-target
                    {% for name, isegs in inter_segments.items() %}
                        edit "{{isegs[1].vrfid}}"
                            set route-map "RM_DENY_ALL"
                            set interface "{{name}}0"
                        next
                    {% endfor %}
                    end
                {% endif %}
            next
            {% for segment in vrf_segments.values() %}
                {% if segment.vrfid != vrf_pe %}
                    edit "{{segment.vrfid}}"
                        set role ce
                        set rd "65000:{{segment.vrfid}}"
                        set export-rt "65000:{{segment.vrfid}}"
                        set import-rt "65000:{{segment.vrfid}}"
                         {% if vrf_wan==0 %}
                             config leak-target
                                 edit "{{vrf_pe}}"
                                     set route-map "RM_NONVRF0-LOCAL-TAG-ONLY"
                                     {% for name, iseg in inter_segments.items() %}
                                         {% if segment.vrfid == iseg[1].vrfid %}
                                             set interface "{{name}}1"
                                         {% endif %}
                                     {% endfor %}
                                 next
                             end
                         {% endif %}
                next
                {% endif %}
            {% endfor %}
        end
    end
{% endif %}
