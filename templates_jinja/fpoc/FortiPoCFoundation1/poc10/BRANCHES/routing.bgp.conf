{% if FMG_FORTIGATE_ID %}
    {% import 'SETTINGS.DEVICES' as SETTINGS with context %}

    {% set branch_id = SETTINGS.DEVICES[FMG_FORTIGATE_ID].branch_id %}
    {% set lan = SETTINGS.DEVICES[FMG_FORTIGATE_ID].lan %}
    {% set cross_region_advpn = SETTINGS.DEVICES[FMG_FORTIGATE_ID].cross_region_advpn %}
    {% set datacenter = SETTINGS.DEVICES[FMG_FORTIGATE_ID].datacenter %}
    {% set FOS = SETTINGS.DEVICES[FMG_FORTIGATE_ID].FOS %}
    {% set region = SETTINGS.DEVICES[FMG_FORTIGATE_ID].region %}
    {% set bidir_sdwan = SETTINGS.DEVICES[FMG_FORTIGATE_ID].bidir_sdwan %}
    {% set vrf_aware_overlay = SETTINGS.DEVICES[FMG_FORTIGATE_ID].vrf_aware_overlay %}
    {% set loopback = SETTINGS.DEVICES[FMG_FORTIGATE_ID].loopback %}
{% endif %}

###############################################################################################################
# BGP peerings over VPN overlays

{% set dc1 = '' %}  {# Initialize variables outside of a 'if' block to avoid FMG creating metadata #}
{% set dc2 = '' %}
{% set local_ASN = '' %}

{# Define which ASN is for local region and which ASN is for the remote region #}
# FOS >= 7.0: always eBGP for cross-region

{% if region == 'West' -%}
    {%- set local_ASN = 65001 -%}
    {%- set dc1 = datacenter.west.first.id -%}
    {%- set dc2 = datacenter.west.second.id -%}
{%- else -%} {# East region #}
    {%- set local_ASN = 65002 -%}
    {%- set dc1 = datacenter.east.first.id -%}
    {%- set dc2 = datacenter.east.second.id -%}
{%- endif -%}

# local-out BGP session cannot follow SDWAN rule so the BGP session is established
# on top of one of the overlays and cannot pro-actively react to the degradation
# of this overlay ('brownout switchover' on high latency, or high packet loss or
# low available bandwitdh)
# The case of "overlay down" ('blackout switchover') is covered however.
# BGP session will seamlessly switchover to another available overlay by making
# the BGP hold-timer longer than DPD.
# When overlay goes down, BGP session is expected to switchover seamlessly, no problem, no flap

# BGP timers ( keepalive-timer , holdtime-timer )
# BGP timers are an important consideration in this routing design!
# Traditionally, we try to lower these timers as much as possible, in order to speed up BGP convergence
# caused by failure of a link. This won’t be our goal here!
# Since we build just a single BGP session between the Edge device and each Hub, we must ensure
# that this BGP session can seamlessly switchover from one overlay to another, in case when the overlay
# currently being used by BGP goes down.
# The session can switchover when the route to the Hub’s loopback address via the broken overlay disappears.
# This will happen automatically, when DPD brings the tunnel down.
# Which means that DPD timers must be shorter than BGP Hold-Time!
#
# Is it a problem to have such slow BGP timers? Not in this design. And here is why.
# As noted above, there will be a single BGP route for each LAN prefix in the network, recursively resolved
# via all the paths available at the moment. This BGP route remains valid, as long as there is at least one
# path to the destination! Therefore, fast withdrawal of that BGP route is not much of an issue for us. We
# should rather focus on fast withdrawal of the unhealthy path via which that BGP route can be resolved.
# Path health will be monitored by the SD-WAN. This is no longer the responsibility of BGP. Hence, we do
# not require aggressive BGP timers and/or additional protocols such as BFD.

# Tag-based resolution ('merge') is required with this design:
# - on branches to which shortcuts can be established (branches with ADVPN),
# - on branches which can reach another branch (or DC from other region) via multiple Hubs

config router route-map
    edit "H1_TAG"
        config rule
            edit 1
                set set-tag 1
            next
        end
    next
    edit "H2_TAG"
        config rule
            edit 1
                set set-tag 2
            next
        end
    next
end

config router bgp
    set as {{local_ASN}}
    set router-id {{loopback}}
    set keepalive-timer 15
    set holdtime-timer 45
    set ibgp-multipath enable

    set recursive-next-hop enable
    set tag-resolve-mode merge

    config neighbor
        edit "10.200.{{region_id}}.254"
            set interface "lo-BGP"
            set update-source "lo-BGP"
            set remote-as {{local_ASN}}
            set route-map-in "H1_TAG"
            set connect-timer 1
            set advertisement-interval 1
            set soft-reconfiguration enable
        next
        edit "10.200.{{region_id}}.253"
            set interface "lo-BGP"
            set update-source "lo-BGP"
            set remote-as {{local_ASN}}
            set route-map-in "H2_TAG"
            set connect-timer 1
            set advertisement-interval 1
            set soft-reconfiguration enable
        next
    end
    config network
        edit 1
            set prefix  {{lan.subnet}} {{lan.mask}}
        next
    end
end

{% if vrf_aware_overlay %}
# VRF-aware overlay
#
# VRF {{vrf_pe}} is used as PE VRF to carry vpnv4 prefixes for the CE VRFs
{% if vrf_pe == vrf_seg0 -%}
# It is also used to carry IPv4 prefixes for port5 LAN which is in same VRF as the PE VRF
{% endif -%}
# For VPNv4 RD and RT we DO NOT use the local ASN, we use 65000 for all devices from all regions
#
# Internet access:
# VRF {{vrf_pe}} is the PE VRF which contains all underlays and all overlays interfaces (+ BGP & HC loopbacks)
# This VRF therefore contains the Internet underlays and the default routes to Internet
{% if vrf_pe == vrf_seg0 -%}
# SEGMENT_0 (port5) being in the PE VRF it has native access to the Internet
{% endif -%}
# CE VRFs must send their traffic via the PE VRF to access the Internet
# It requires:
# 1- configuring a static default-route in each CE VRF to send Internet traffic into PE VRF (via an inter-vrf link)
# 2- ensuring that the traffic ingressing PE VRF from CE VRF is not rejected by RPF
#
# There are two ways to deal with point 2-:
# A- NAT the traffic when it enters PE VRF with the IP@ assigned inter-vrf link on PE side
# B- Configure route leaking from each CE VRF to the PE VRF
#
# Option A- is only possible if the PE VRF is <> 0
# Option B- breaks the "VRF isolation" by merging all subnets from all CE VRFs in PE VRF (no overlap is possible)
# but it allows to have a LAN segment in VRF 0 which is the only VRF which can do multicast routing
#
{% if vrf_pe != 0 -%}
# In this PoC the PE VRF is not in VRF 0 so NATing (option A) is done.
{% else -%}
# In this PoC the PE VRF is in VRF 0 so NATing (option A) is not possible. Route leaking is done instead.
# We just want the subnets of the CE VRFs to be in the RIB of the PE VRF. There is no need to re-advertise them.
# This is controlled with route-map-out "RM_DENY_CEVRF" which prevents prefixes leaked from the CE VRFs to be
# advertised as ipv4 prefixes (route-map-out) in the PE VRF.
#
# Technically, only leak from CE VRF to PE VRF is needed to avoid RPF failure when packets from CE VRF reaches PE VRF
# But FOS requires to configure bidirectional leaking VRFx<->VRFy otherwise the BGP next-hop is marked as inaccessible
# Leaking from CE-VRF to PE-VRF is done only for the local LAN subnet of VRFx (tagged as 32768 -for "LOCAL"- with route-map
# "RM_SET_CEVRF_LOCAL_TAG"), other prefixes in CE VRF learned from remote peers are not leaked to PE VRF.
# Pseudo-leaking from PE VRF to CE VRF is configured due to the "bidirectional requirement" but route-map "RM_DENY_ALL"
# is used to block all prefixes so no leaking occurs between PE VRF -> CE VRF
#
    config router route-map
        edit "RM_SET_CEVRF_LOCAL_TAG"
            config rule
                edit 1
                    set set-tag 32768
                next
            end
        next
        edit "RM_NONVRF0-LOCAL-TAG-ONLY"
            config rule
                edit 1
                    set match-tag 32768
                next
            end
        next
        edit "RM_DENY_CEVRF"
            config rule
                edit 1
                    set action deny
                    set match-tag 32768
                next
                edit 2
                next
            end
        next
        edit "RM_DENY_ALL"
            config rule
                edit 1
                    set action deny
                next
            end
        next
    end
{% endif -%}

    config router bgp
        config neighbor
            edit "10.200.{{region_id}}.254"
                set route-map-in-vpnv4 "H1_TAG"
                {{ "set route-map-out RM_DENY_CEVRF" if vrf_pe==0 }}
                set soft-reconfiguration-vpnv4 enable
            next
            edit "10.200.{{region_id}}.253"
                set route-map-in-vpnv4 "H2_TAG"
                {{ "set route-map-out RM_DENY_CEVRF" if vrf_pe==0 }}
                set soft-reconfiguration-vpnv4 enable
            next
        end
        config network
            {% for name, segment in cevrf_segments.items() %}
                {% if name != "port5" %}  {# port5/SEG0 is already defined above with bgp config #}
                    edit "{{10+loop.index0}}"
                        set prefix {{segment.subnet}} {{segment.mask}}
                        {{ "set route-map RM_SET_CEVRF_LOCAL_TAG" if vrf_pe==0 }}
                    next
                {% endif %}
            {% endfor %}
        end
        config vrf
            edit "{{vrf_pe}}"
                set role pe
                {% if vrf_pe==0 %}
                    config leak-target
                    {% for name, isegs in inter_segments.items() %}
                        edit "{{isegs[1].vrfid}}"
                            set route-map "RM_DENY_ALL"
                            set interface "{{name}}0"
                        next
                    {% endfor %}
                    end
                {% endif %}
            next
            {% for segment in cevrf_segments.values() %}
                edit "{{segment.vrfid}}"
                    set role ce
                    set rd "65000:{{segment.vrfid}}"
                    set export-rt "65000:{{segment.vrfid}}"
                    set import-rt "65000:{{segment.vrfid}}"
                    {% if vrf_pe==0 %}
                        config leak-target
                            edit "{{vrf_pe}}"
                                set route-map "RM_NONVRF0-LOCAL-TAG-ONLY"
                                {% for name, iseg in inter_segments.items() %}
                                    {% if segment.vrfid == iseg[1].vrfid %}
                                        set interface "{{name}}1"
                                    {% endif %}
                                {% endfor %}
                            next
                        end
                    {% endif %}
                next
            {% endfor %}
        end
    end
{% endif %}

#
# BGP routes
#

{% if region == 'West' and branch_id == 1 and FOS >= 7_000_004 and cross_region_advpn %}
# WEST-BR1 # alias rib
# Codes: K - kernel, C - connected, S - static, R - RIP, B - BGP
#        O - OSPF, IA - OSPF inter area
#        N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
#        E1 - OSPF external type 1, E2 - OSPF external type 2
#        i - IS-IS, L1 - IS-IS level-1, L2 - IS-IS level-2, ia - IS-IS inter area
#        * - candidate default
#
# Routing table for VRF=0
# S*      0.0.0.0/0 [1/0] via 100.64.31.254, Internet_1, [1/0]
#                   [1/0] via 100.64.32.254, Internet_2, [1/0]
#                   [1/0] via H1_INET2 tunnel 10.0.0.1, [10/0]
#                   [1/0] via H2_INET2 tunnel 10.0.0.3, [10/0]
#                   [1/0] via H1_MPLS tunnel 10.0.14.1, [10/0]
#                   [1/0] via H2_MPLS tunnel 10.0.24.2, [10/0]
#                   [1/0] via H1_INET1 tunnel 100.64.11.1, [10/0]
#                   [1/0] via H2_INET1 tunnel 100.64.21.2, [10/0]
# C       10.0.1.0/24 is directly connected, port5
# B       10.0.2.0/24 [200/0] via 10.200.1.2 tag 2 (recursive via H2_INET2 tunnel 10.0.0.3), 02:44:49
#                                                  (recursive via H2_MPLS tunnel 10.0.24.2), 02:44:49
#                                                  (recursive via H2_INET1 tunnel 100.64.21.2), 02:44:49
#                     [200/0] via 10.200.1.2 tag 1 (recursive via H1_INET2 tunnel 10.0.0.1), 02:44:49
#                                                  (recursive via H1_MPLS tunnel 10.0.14.1), 02:44:49
#                                                  (recursive via H1_INET1 tunnel 100.64.11.1), 02:44:49
# S       10.0.14.0/24 [10/0] via 10.0.34.254, MPLS, [1/0]
# S       10.0.15.0/24 [10/0] via 10.0.34.254, MPLS, [1/0]
# S       10.0.24.0/24 [10/0] via 10.0.34.254, MPLS, [1/0]
# S       10.0.25.0/24 [10/0] via 10.0.34.254, MPLS, [1/0]
# C       10.0.34.0/24 is directly connected, MPLS
# S       10.0.35.0/24 [10/0] via 10.0.34.254, MPLS, [1/0]
# S       10.0.44.0/24 [10/0] via 10.0.34.254, MPLS, [1/0]
# S       10.0.45.0/24 [10/0] via 10.0.34.254, MPLS, [1/0]
# B       10.1.0.0/24 [200/0] via 10.200.1.254 tag 1 (recursive via H1_INET2 tunnel 10.0.0.1), 02:45:43
#                                                    (recursive via H1_MPLS tunnel 10.0.14.1), 02:45:43
#                                                    (recursive via H1_INET1 tunnel 100.64.11.1), 02:45:43
# B       10.2.0.0/24 [200/0] via 10.200.1.253 tag 2 (recursive via H2_INET2 tunnel 10.0.0.3), 02:45:44
#                                                    (recursive via H2_MPLS tunnel 10.0.24.2), 02:45:44
#                                                    (recursive via H2_INET1 tunnel 100.64.21.2), 02:45:44
# B       10.4.0.0/24 [200/0] via 10.200.2.254 tag 2 (recursive via H2_INET2 tunnel 10.0.0.3), 02:44:49
#                                                    (recursive via H2_MPLS tunnel 10.0.24.2), 02:44:49
#                                                    (recursive via H2_INET1 tunnel 100.64.21.2), 02:44:49
#                     [200/0] via 10.200.2.254 tag 1 (recursive via H1_INET2 tunnel 10.0.0.1), 02:44:49
#                                                    (recursive via H1_MPLS tunnel 10.0.14.1), 02:44:49
#                                                    (recursive via H1_INET1 tunnel 100.64.11.1), 02:44:49
# B       10.4.1.0/24 [200/0] via 10.200.2.1 tag 2 (recursive via H2_INET2 tunnel 10.0.0.3), 02:44:49
#                                                  (recursive via H2_MPLS tunnel 10.0.24.2), 02:44:49
#                                                  (recursive via H2_INET1 tunnel 100.64.21.2), 02:44:49
#                     [200/0] via 10.200.2.1 tag 1 (recursive via H1_INET2 tunnel 10.0.0.1), 02:44:49
#                                                  (recursive via H1_MPLS tunnel 10.0.14.1), 02:44:49
#                                                  (recursive via H1_INET1 tunnel 100.64.11.1), 02:44:49
# B       10.200.0.0/16 [200/0] via 10.200.1.253 tag 2 (recursive via H2_INET2 tunnel 10.0.0.3), 02:45:34
#                                                      (recursive via H2_MPLS tunnel 10.0.24.2), 02:45:34
#                                                      (recursive via H2_INET1 tunnel 100.64.21.2), 02:45:34
#                       [200/0] via 10.200.1.254 tag 1 (recursive via H1_INET2 tunnel 10.0.0.1), 02:45:34
#                                                      (recursive via H1_MPLS tunnel 10.0.14.1), 02:45:34
#                                                      (recursive via H1_INET1 tunnel 100.64.11.1), 02:45:34
# C       10.200.1.1/32 is directly connected, lo-BGP
# S       10.200.1.253/32 [15/0] via H2_INET2 tunnel 10.0.0.3, [1/0]
#                         [15/0] via H2_MPLS tunnel 10.0.24.2, [1/0]
#                         [15/0] via H2_INET1 tunnel 100.64.21.2, [1/0]
# S       10.200.1.254/32 [15/0] via H1_INET2 tunnel 10.0.0.1, [1/0]
#                         [15/0] via H1_MPLS tunnel 10.0.14.1, [1/0]
#                         [15/0] via H1_INET1 tunnel 100.64.11.1, [1/0]
# C       100.64.31.0/24 is directly connected, Internet_1
# C       100.64.32.0/24 is directly connected, Internet_2
# C       172.16.31.0/24 is directly connected, port10
{% endif %}

{% if region == 'West' and branch_id == 2 and FOS >= 7_000_004 and cross_region_advpn %}
# WEST-BR2 # alias rib
# Codes: K - kernel, C - connected, S - static, R - RIP, B - BGP
#        O - OSPF, IA - OSPF inter area
#        N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
#        E1 - OSPF external type 1, E2 - OSPF external type 2
#        i - IS-IS, L1 - IS-IS level-1, L2 - IS-IS level-2, ia - IS-IS inter area
#        * - candidate default
#
# Routing table for VRF=0
# S*      0.0.0.0/0 [1/0] via 100.64.41.254, Internet_1, [1/0]
#                   [1/0] via 100.64.42.254, Internet_2, [1/0]
#                   [1/0] via H1_INET2 tunnel 10.0.0.1, [10/0]
#                   [1/0] via H2_INET2 tunnel 10.0.0.3, [10/0]
#                   [1/0] via H1_MPLS tunnel 10.0.14.1, [10/0]
#                   [1/0] via H2_MPLS tunnel 10.0.24.2, [10/0]
#                   [1/0] via H1_INET1 tunnel 100.64.11.1, [10/0]
#                   [1/0] via H2_INET1 tunnel 100.64.21.2, [10/0]
# B       10.0.1.0/24 [200/0] via 10.200.1.1 tag 2 (recursive via H2_INET2 tunnel 10.0.0.3), 02:45:26
#                                                  (recursive via H2_MPLS tunnel 10.0.24.2), 02:45:26
#                                                  (recursive via H2_INET1 tunnel 100.64.21.2), 02:45:26
#                     [200/0] via 10.200.1.1 tag 1 (recursive via H1_INET2 tunnel 10.0.0.1), 02:45:26
#                                                  (recursive via H1_MPLS tunnel 10.0.14.1), 02:45:26
#                                                  (recursive via H1_INET1 tunnel 100.64.11.1), 02:45:26
# C       10.0.2.0/24 is directly connected, port5
# S       10.0.14.0/24 [10/0] via 10.0.44.254, MPLS, [1/0]
# S       10.0.15.0/24 [10/0] via 10.0.44.254, MPLS, [1/0]
# S       10.0.24.0/24 [10/0] via 10.0.44.254, MPLS, [1/0]
# S       10.0.25.0/24 [10/0] via 10.0.44.254, MPLS, [1/0]
# S       10.0.34.0/24 [10/0] via 10.0.44.254, MPLS, [1/0]
# S       10.0.35.0/24 [10/0] via 10.0.44.254, MPLS, [1/0]
# C       10.0.44.0/24 is directly connected, MPLS
# S       10.0.45.0/24 [10/0] via 10.0.44.254, MPLS, [1/0]
# B       10.1.0.0/24 [200/0] via 10.200.1.254 tag 1 (recursive via H1_INET2 tunnel 10.0.0.1), 02:46:20
#                                                    (recursive via H1_MPLS tunnel 10.0.14.1), 02:46:20
#                                                    (recursive via H1_INET1 tunnel 100.64.11.1), 02:46:20
# B       10.2.0.0/24 [200/0] via 10.200.1.253 tag 2 (recursive via H2_INET2 tunnel 10.0.0.3), 02:46:21
#                                                    (recursive via H2_MPLS tunnel 10.0.24.2), 02:46:21
#                                                    (recursive via H2_INET1 tunnel 100.64.21.2), 02:46:21
# B       10.4.0.0/24 [200/0] via 10.200.2.254 tag 2 (recursive via H2_INET2 tunnel 10.0.0.3), 02:45:26
#                                                    (recursive via H2_MPLS tunnel 10.0.24.2), 02:45:26
#                                                    (recursive via H2_INET1 tunnel 100.64.21.2), 02:45:26
#                     [200/0] via 10.200.2.254 tag 1 (recursive via H1_INET2 tunnel 10.0.0.1), 02:45:26
#                                                    (recursive via H1_MPLS tunnel 10.0.14.1), 02:45:26
#                                                    (recursive via H1_INET1 tunnel 100.64.11.1), 02:45:26
# B       10.4.1.0/24 [200/0] via 10.200.2.1 tag 2 (recursive via H2_INET2 tunnel 10.0.0.3), 02:45:26
#                                                  (recursive via H2_MPLS tunnel 10.0.24.2), 02:45:26
#                                                  (recursive via H2_INET1 tunnel 100.64.21.2), 02:45:26
#                     [200/0] via 10.200.2.1 tag 1 (recursive via H1_INET2 tunnel 10.0.0.1), 02:45:26
#                                                  (recursive via H1_MPLS tunnel 10.0.14.1), 02:45:26
#                                                  (recursive via H1_INET1 tunnel 100.64.11.1), 02:45:26
# B       10.200.0.0/16 [200/0] via 10.200.1.253 tag 2 (recursive via H2_INET2 tunnel 10.0.0.3), 02:46:12
#                                                      (recursive via H2_MPLS tunnel 10.0.24.2), 02:46:12
#                                                      (recursive via H2_INET1 tunnel 100.64.21.2), 02:46:12
#                       [200/0] via 10.200.1.254 tag 1 (recursive via H1_INET2 tunnel 10.0.0.1), 02:46:12
#                                                      (recursive via H1_MPLS tunnel 10.0.14.1), 02:46:12
#                                                      (recursive via H1_INET1 tunnel 100.64.11.1), 02:46:12
# C       10.200.1.2/32 is directly connected, lo-BGP
# S       10.200.1.253/32 [15/0] via H2_INET2 tunnel 10.0.0.3, [1/0]
#                         [15/0] via H2_MPLS tunnel 10.0.24.2, [1/0]
#                         [15/0] via H2_INET1 tunnel 100.64.21.2, [1/0]
# S       10.200.1.254/32 [15/0] via H1_INET2 tunnel 10.0.0.1, [1/0]
#                         [15/0] via H1_MPLS tunnel 10.0.14.1, [1/0]
#                         [15/0] via H1_INET1 tunnel 100.64.11.1, [1/0]
# C       100.64.41.0/24 is directly connected, Internet_1
# C       100.64.42.0/24 is directly connected, Internet_2
# C       172.16.31.0/24 is directly connected, port10
{% endif %}

{% if region == 'East' and branch_id == 1 and FOS >= 7_000_004 and cross_region_advpn %}
# EAST-BR1 # alias rib
# Codes: K - kernel, C - connected, S - static, R - RIP, B - BGP
#        O - OSPF, IA - OSPF inter area
#        N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
#        E1 - OSPF external type 1, E2 - OSPF external type 2
#        i - IS-IS, L1 - IS-IS level-1, L2 - IS-IS level-2, ia - IS-IS inter area
#        * - candidate default
#
# Routing table for VRF=0
# S*      0.0.0.0/0 [1/0] via 100.64.41.254, Internet_1, [1/0]
#                   [1/0] via 100.64.42.254, Internet_2, [1/0]
#                   [1/0] via H1_INET2 tunnel 10.0.0.1, [10/0]
#                   [1/0] via H1_MPLS tunnel 10.0.24.3, [10/0]
#                   [1/0] via H1_INET1 tunnel 100.64.21.3, [10/0]
# B       10.0.1.0/24 [200/0] via 10.200.1.1 tag 1 (recursive via H1_INET2 tunnel 10.0.0.1), 02:45:57
#                                                  (recursive via H1_MPLS tunnel 10.0.24.3), 02:45:57
#                                                  (recursive via H1_INET1 tunnel 100.64.21.3), 02:45:57
# B       10.0.2.0/24 [200/0] via 10.200.1.2 tag 1 (recursive via H1_INET2 tunnel 10.0.0.1), 02:45:57
#                                                  (recursive via H1_MPLS tunnel 10.0.24.3), 02:45:57
#                                                  (recursive via H1_INET1 tunnel 100.64.21.3), 02:45:57
# S       10.0.14.0/24 [10/0] via 10.0.44.254, MPLS, [1/0]
# S       10.0.15.0/24 [10/0] via 10.0.44.254, MPLS, [1/0]
# S       10.0.24.0/24 [10/0] via 10.0.44.254, MPLS, [1/0]
# S       10.0.25.0/24 [10/0] via 10.0.44.254, MPLS, [1/0]
# S       10.0.34.0/24 [10/0] via 10.0.44.254, MPLS, [1/0]
# S       10.0.35.0/24 [10/0] via 10.0.44.254, MPLS, [1/0]
# C       10.0.44.0/24 is directly connected, MPLS
# S       10.0.45.0/24 [10/0] via 10.0.44.254, MPLS, [1/0]
# B       10.1.0.0/24 [200/0] via 10.200.1.254 tag 1 (recursive via H1_INET2 tunnel 10.0.0.1), 02:45:57
#                                                    (recursive via H1_MPLS tunnel 10.0.24.3), 02:45:57
#                                                    (recursive via H1_INET1 tunnel 100.64.21.3), 02:45:57
# B       10.2.0.0/24 [200/0] via 10.200.1.253 tag 1 (recursive via H1_INET2 tunnel 10.0.0.1), 02:45:57
#                                                    (recursive via H1_MPLS tunnel 10.0.24.3), 02:45:57
#                                                    (recursive via H1_INET1 tunnel 100.64.21.3), 02:45:57
# B       10.4.0.0/24 [200/0] via 10.200.2.254 tag 1 (recursive via H1_INET2 tunnel 10.0.0.1), 02:46:51
#                                                    (recursive via H1_MPLS tunnel 10.0.24.3), 02:46:51
#                                                    (recursive via H1_INET1 tunnel 100.64.21.3), 02:46:51
# C       10.4.1.0/24 is directly connected, port5
# B       10.200.0.0/16 [200/0] via 10.200.2.254 tag 1 (recursive via H1_INET2 tunnel 10.0.0.1), 02:46:42
#                                                      (recursive via H1_MPLS tunnel 10.0.24.3), 02:46:42
#                                                      (recursive via H1_INET1 tunnel 100.64.21.3), 02:46:42
# C       10.200.2.1/32 is directly connected, lo-BGP
# S       10.200.2.254/32 [15/0] via H1_INET2 tunnel 10.0.0.1, [1/0]
#                         [15/0] via H1_MPLS tunnel 10.0.24.3, [1/0]
#                         [15/0] via H1_INET1 tunnel 100.64.21.3, [1/0]
# C       100.64.41.0/24 is directly connected, Internet_1
# C       100.64.42.0/24 is directly connected, Internet_2
# C       172.16.31.0/24 is directly connected, port10
{% endif %}

{#============================================================================================================= #}

{% if region == 'West' and branch_id == 1 and FOS >= 7_000_004 and not cross_region_advpn %}
# WEST-BR1 # alias rib
# Codes: K - kernel, C - connected, S - static, R - RIP, B - BGP
#        O - OSPF, IA - OSPF inter area
#        N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
#        E1 - OSPF external type 1, E2 - OSPF external type 2
#        i - IS-IS, L1 - IS-IS level-1, L2 - IS-IS level-2, ia - IS-IS inter area
#        * - candidate default
#
# Routing table for VRF=0
# S*      0.0.0.0/0 [1/0] via 100.64.31.254, Internet_1, [1/0]
#                   [1/0] via 100.64.32.254, Internet_2, [1/0]
#                   [1/0] via H1_INET2 tunnel 10.0.0.1, [10/0]
#                   [1/0] via H2_INET2 tunnel 10.0.0.3, [10/0]
#                   [1/0] via H1_MPLS tunnel 10.0.14.1, [10/0]
#                   [1/0] via H2_MPLS tunnel 10.0.24.2, [10/0]
#                   [1/0] via H1_INET1 tunnel 100.64.11.1, [10/0]
#                   [1/0] via H2_INET1 tunnel 100.64.21.2, [10/0]
# C       10.0.1.0/24 is directly connected, port5
# B       10.0.2.0/24 [200/0] via 10.200.1.2 tag 2 (recursive via H2_INET2 tunnel 10.0.0.3), 00:03:33
#                                                  (recursive via H2_MPLS tunnel 10.0.24.2), 00:03:33
#                                                  (recursive via H2_INET1 tunnel 100.64.21.2), 00:03:33
#                     [200/0] via 10.200.1.2 tag 1 (recursive via H1_INET2 tunnel 10.0.0.1), 00:03:33
#                                                  (recursive via H1_MPLS tunnel 10.0.14.1), 00:03:33
#                                                  (recursive via H1_INET1 tunnel 100.64.11.1), 00:03:33
# S       10.0.14.0/24 [10/0] via 10.0.34.254, MPLS, [1/0]
# S       10.0.15.0/24 [10/0] via 10.0.34.254, MPLS, [1/0]
# S       10.0.24.0/24 [10/0] via 10.0.34.254, MPLS, [1/0]
# S       10.0.25.0/24 [10/0] via 10.0.34.254, MPLS, [1/0]
# C       10.0.34.0/24 is directly connected, MPLS
# S       10.0.35.0/24 [10/0] via 10.0.34.254, MPLS, [1/0]
# S       10.0.44.0/24 [10/0] via 10.0.34.254, MPLS, [1/0]
# S       10.0.45.0/24 [10/0] via 10.0.34.254, MPLS, [1/0]
# B       10.1.0.0/24 [200/0] via 10.200.1.254 tag 1 (recursive via H1_INET2 tunnel 10.0.0.1), 00:04:26
#                                                    (recursive via H1_MPLS tunnel 10.0.14.1), 00:04:26
#                                                    (recursive via H1_INET1 tunnel 100.64.11.1), 00:04:26
# B       10.2.0.0/24 [200/0] via 10.200.1.253 tag 2 (recursive via H2_INET2 tunnel 10.0.0.3), 00:04:28
#                                                    (recursive via H2_MPLS tunnel 10.0.24.2), 00:04:28
#                                                    (recursive via H2_INET1 tunnel 100.64.21.2), 00:04:28
# B       10.4.0.0/14 [200/0] via 10.200.1.253 tag 2 (recursive via H2_INET2 tunnel 10.0.0.3), 00:04:26
#                                                    (recursive via H2_MPLS tunnel 10.0.24.2), 00:04:26
#                                                    (recursive via H2_INET1 tunnel 100.64.21.2), 00:04:26
#                     [200/0] via 10.200.1.254 tag 1 (recursive via H1_INET2 tunnel 10.0.0.1), 00:04:26
#                                                    (recursive via H1_MPLS tunnel 10.0.14.1), 00:04:26
#                                                    (recursive via H1_INET1 tunnel 100.64.11.1), 00:04:26
# B       10.200.1.0/24 [200/0] via 10.200.1.253 tag 2 (recursive via H2_INET2 tunnel 10.0.0.3), 00:04:19
#                                                      (recursive via H2_MPLS tunnel 10.0.24.2), 00:04:19
#                                                      (recursive via H2_INET1 tunnel 100.64.21.2), 00:04:19
#                       [200/0] via 10.200.1.254 tag 1 (recursive via H1_INET2 tunnel 10.0.0.1), 00:04:19
#                                                      (recursive via H1_MPLS tunnel 10.0.14.1), 00:04:19
#                                                      (recursive via H1_INET1 tunnel 100.64.11.1), 00:04:19
# C       10.200.1.1/32 is directly connected, lo-BGP
# S       10.200.1.253/32 [15/0] via H2_INET2 tunnel 10.0.0.3, [1/0]
#                         [15/0] via H2_MPLS tunnel 10.0.24.2, [1/0]
#                         [15/0] via H2_INET1 tunnel 100.64.21.2, [1/0]
# S       10.200.1.254/32 [15/0] via H1_INET2 tunnel 10.0.0.1, [1/0]
#                         [15/0] via H1_MPLS tunnel 10.0.14.1, [1/0]
#                         [15/0] via H1_INET1 tunnel 100.64.11.1, [1/0]
# C       100.64.31.0/24 is directly connected, Internet_1
# C       100.64.32.0/24 is directly connected, Internet_2
# C       172.16.31.0/24 is directly connected, port10
{% endif %}

{% if region == 'West' and branch_id == 2 and FOS >= 7_000_004 and not cross_region_advpn %}
# WEST-BR2 # alias rib
# Codes: K - kernel, C - connected, S - static, R - RIP, B - BGP
#        O - OSPF, IA - OSPF inter area
#        N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
#        E1 - OSPF external type 1, E2 - OSPF external type 2
#        i - IS-IS, L1 - IS-IS level-1, L2 - IS-IS level-2, ia - IS-IS inter area
#        * - candidate default
#
# Routing table for VRF=0
# S*      0.0.0.0/0 [1/0] via 100.64.41.254, Internet_1, [1/0]
#                   [1/0] via 100.64.42.254, Internet_2, [1/0]
#                   [1/0] via H1_INET2 tunnel 10.0.0.1, [10/0]
#                   [1/0] via H2_INET2 tunnel 10.0.0.3, [10/0]
#                   [1/0] via H1_MPLS tunnel 10.0.14.1, [10/0]
#                   [1/0] via H2_MPLS tunnel 10.0.24.2, [10/0]
#                   [1/0] via H1_INET1 tunnel 100.64.11.1, [10/0]
#                   [1/0] via H2_INET1 tunnel 100.64.21.2, [10/0]
# B       10.0.1.0/24 [200/0] via 10.200.1.1 tag 2 (recursive via H2_INET2 tunnel 10.0.0.3), 00:04:36
#                                                  (recursive via H2_MPLS tunnel 10.0.24.2), 00:04:36
#                                                  (recursive via H2_INET1 tunnel 100.64.21.2), 00:04:36
#                     [200/0] via 10.200.1.1 tag 1 (recursive via H1_INET2 tunnel 10.0.0.1), 00:04:36
#                                                  (recursive via H1_MPLS tunnel 10.0.14.1), 00:04:36
#                                                  (recursive via H1_INET1 tunnel 100.64.11.1), 00:04:36
# C       10.0.2.0/24 is directly connected, port5
# S       10.0.14.0/24 [10/0] via 10.0.44.254, MPLS, [1/0]
# S       10.0.15.0/24 [10/0] via 10.0.44.254, MPLS, [1/0]
# S       10.0.24.0/24 [10/0] via 10.0.44.254, MPLS, [1/0]
# S       10.0.25.0/24 [10/0] via 10.0.44.254, MPLS, [1/0]
# S       10.0.34.0/24 [10/0] via 10.0.44.254, MPLS, [1/0]
# S       10.0.35.0/24 [10/0] via 10.0.44.254, MPLS, [1/0]
# C       10.0.44.0/24 is directly connected, MPLS
# S       10.0.45.0/24 [10/0] via 10.0.44.254, MPLS, [1/0]
# B       10.1.0.0/24 [200/0] via 10.200.1.254 tag 1 (recursive via H1_INET2 tunnel 10.0.0.1), 00:05:30
#                                                    (recursive via H1_MPLS tunnel 10.0.14.1), 00:05:30
#                                                    (recursive via H1_INET1 tunnel 100.64.11.1), 00:05:30
# B       10.2.0.0/24 [200/0] via 10.200.1.253 tag 2 (recursive via H2_INET2 tunnel 10.0.0.3), 00:04:36
#                                                    (recursive via H2_MPLS tunnel 10.0.24.2), 00:04:36
#                                                    (recursive via H2_INET1 tunnel 100.64.21.2), 00:04:36
# B       10.4.0.0/14 [200/0] via 10.200.1.253 tag 2 (recursive via H2_INET2 tunnel 10.0.0.3), 00:04:36
#                                                    (recursive via H2_MPLS tunnel 10.0.24.2), 00:04:36
#                                                    (recursive via H2_INET1 tunnel 100.64.21.2), 00:04:36
#                     [200/0] via 10.200.1.254 tag 1 (recursive via H1_INET2 tunnel 10.0.0.1), 00:04:36
#                                                    (recursive via H1_MPLS tunnel 10.0.14.1), 00:04:36
#                                                    (recursive via H1_INET1 tunnel 100.64.11.1), 00:04:36
# B       10.200.1.0/24 [200/0] via 10.200.1.253 tag 2 (recursive via H2_INET2 tunnel 10.0.0.3), 00:04:36
#                                                      (recursive via H2_MPLS tunnel 10.0.24.2), 00:04:36
#                                                      (recursive via H2_INET1 tunnel 100.64.21.2), 00:04:36
#                       [200/0] via 10.200.1.254 tag 1 (recursive via H1_INET2 tunnel 10.0.0.1), 00:04:36
#                                                      (recursive via H1_MPLS tunnel 10.0.14.1), 00:04:36
#                                                      (recursive via H1_INET1 tunnel 100.64.11.1), 00:04:36
# C       10.200.1.2/32 is directly connected, lo-BGP
# S       10.200.1.253/32 [15/0] via H2_INET2 tunnel 10.0.0.3, [1/0]
#                         [15/0] via H2_MPLS tunnel 10.0.24.2, [1/0]
#                         [15/0] via H2_INET1 tunnel 100.64.21.2, [1/0]
# S       10.200.1.254/32 [15/0] via H1_INET2 tunnel 10.0.0.1, [1/0]
#                         [15/0] via H1_MPLS tunnel 10.0.14.1, [1/0]
#                         [15/0] via H1_INET1 tunnel 100.64.11.1, [1/0]
# C       100.64.41.0/24 is directly connected, Internet_1
# C       100.64.42.0/24 is directly connected, Internet_2
# C       172.16.31.0/24 is directly connected, port10
{% endif %}

{% if region == 'East' and branch_id == 1 and FOS >= 7_000_004 and not cross_region_advpn %}
# EAST-BR1 # alias rib
# Codes: K - kernel, C - connected, S - static, R - RIP, B - BGP
#        O - OSPF, IA - OSPF inter area
#        N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
#        E1 - OSPF external type 1, E2 - OSPF external type 2
#        i - IS-IS, L1 - IS-IS level-1, L2 - IS-IS level-2, ia - IS-IS inter area
#        * - candidate default
#
# Routing table for VRF=0
# S*      0.0.0.0/0 [1/0] via 100.64.41.254, Internet_1, [1/0]
#                   [1/0] via 100.64.42.254, Internet_2, [1/0]
#                   [1/0] via H1_INET2 tunnel 10.0.0.1, [10/0]
#                   [1/0] via H1_MPLS tunnel 10.0.24.3, [10/0]
#                   [1/0] via H1_INET1 tunnel 100.64.21.3, [10/0]
# B       10.0.0.0/14 [200/0] via 10.200.2.254 tag 1 (recursive via H1_INET2 tunnel 10.0.0.1), 00:06:36
#                                                    (recursive via H1_MPLS tunnel 10.0.24.3), 00:06:36
#                                                    (recursive via H1_INET1 tunnel 100.64.21.3), 00:06:36
# S       10.0.14.0/24 [10/0] via 10.0.44.254, MPLS, [1/0]
# S       10.0.15.0/24 [10/0] via 10.0.44.254, MPLS, [1/0]
# S       10.0.24.0/24 [10/0] via 10.0.44.254, MPLS, [1/0]
# S       10.0.25.0/24 [10/0] via 10.0.44.254, MPLS, [1/0]
# S       10.0.34.0/24 [10/0] via 10.0.44.254, MPLS, [1/0]
# S       10.0.35.0/24 [10/0] via 10.0.44.254, MPLS, [1/0]
# C       10.0.44.0/24 is directly connected, MPLS
# S       10.0.45.0/24 [10/0] via 10.0.44.254, MPLS, [1/0]
# B       10.4.0.0/24 [200/0] via 10.200.2.254 tag 1 (recursive via H1_INET2 tunnel 10.0.0.1), 00:06:36
#                                                    (recursive via H1_MPLS tunnel 10.0.24.3), 00:06:36
#                                                    (recursive via H1_INET1 tunnel 100.64.21.3), 00:06:36
# C       10.4.1.0/24 is directly connected, port5
# B       10.200.2.0/24 [200/0] via 10.200.2.254 tag 1 (recursive via H1_INET2 tunnel 10.0.0.1), 00:06:30
#                                                      (recursive via H1_MPLS tunnel 10.0.24.3), 00:06:30
#                                                      (recursive via H1_INET1 tunnel 100.64.21.3), 00:06:30
# C       10.200.2.1/32 is directly connected, lo-BGP
# S       10.200.2.254/32 [15/0] via H1_INET2 tunnel 10.0.0.1, [1/0]
#                         [15/0] via H1_MPLS tunnel 10.0.24.3, [1/0]
#                         [15/0] via H1_INET1 tunnel 100.64.21.3, [1/0]
# C       100.64.41.0/24 is directly connected, Internet_1
# C       100.64.42.0/24 is directly connected, Internet_2
# C       172.16.31.0/24 is directly connected, port10
{% endif %}
