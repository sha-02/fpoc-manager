{% if FMG_FORTIGATE_ID %}
    {% import 'SETTINGS.DEVICES' as SETTINGS with context %}

    {% set branch_id = SETTINGS.DEVICES[FMG_FORTIGATE_ID].branch_id %}
    {% set datacenter = SETTINGS.DEVICES[FMG_FORTIGATE_ID].datacenter %}
    {% set region = SETTINGS.DEVICES[FMG_FORTIGATE_ID].region %}
    {% set bidir_sdwan = SETTINGS.DEVICES[FMG_FORTIGATE_ID].bidir_sdwan %}
    {% set overlay = SETTINGS.DEVICES[FMG_FORTIGATE_ID].overlay %}
{% endif %}

###############################################################################################################
# IPsec

{% set dc1 = '' %}  {# Initialize variables outside of a 'if' block to avoid FMG creating metadata #}
{% set dc2 = '' %}
{% set phase1s = '' %}
{% set overlay1 = '10.201' %}
{% set overlay2 = '10.202' %}
{% set overlay3 = '10.203' %}

{% if region == 'West' %}
    {% set dc1 = datacenter.west.first.id %}
    {% set dc2 = datacenter.west.second.id %}
    {% set phase1s = [
        {   'name': 'H1_INET1', 'interface': 'Internet_1', 'remote_gw': datacenter.west.first.inet1,
            'networkid': dc1~'1', 'localid': region|upper~'_BR'~branch_id~'_INET1', 'status': 'up',
            'ip': overlay1~'.'~dc1~'.'~branch_id, 'remote_ip':overlay1~'.'~dc1~'.254',
        },
        {   'name': 'H1_INET2', 'interface': 'Internet_2', 'remote_gw': datacenter.west.first.inet2,
            'networkid': dc1~'2', 'localid': region|upper~'_BR'~branch_id~'_INET2', 'status': 'up',
            'ip': overlay2~'.'~dc1~'.'~branch_id, 'remote_ip':overlay2~'.'~dc1~'.254',
        },
        {   'name': 'H1_MPLS', 'interface': 'MPLS', 'remote_gw': datacenter.west.first.mpls,
            'networkid': dc1~'3', 'localid': region|upper~'_BR'~branch_id~'_MPLS', 'status': 'up',
            'ip': overlay3~'.'~dc1~'.'~branch_id, 'remote_ip':overlay3~'.'~dc1~'.254',
        },
        {   'name': 'H2_INET1', 'interface': 'Internet_1', 'remote_gw': datacenter.west.second.inet1,
            'networkid': dc2~'1', 'localid': region|upper~'_BR'~branch_id~'_INET1', 'status': 'up',
            'ip': overlay1~'.'~dc2~'.'~branch_id, 'remote_ip':overlay1~'.'~dc2~'.254',
        },
        {   'name': 'H2_INET2', 'interface': 'Internet_2', 'remote_gw': datacenter.west.second.inet2,
            'networkid': dc2~'2', 'localid': region|upper~'_BR'~branch_id~'_INET2', 'status': 'up',
            'ip': overlay2~'.'~dc2~'.'~branch_id, 'remote_ip':overlay2~'.'~dc2~'.254',
        },
        {   'name': 'H2_MPLS', 'interface': 'MPLS', 'remote_gw': datacenter.west.second.mpls,
            'networkid': dc2~'3', 'localid': region|upper~'_BR'~branch_id~'_MPLS', 'status': 'up',
            'ip': overlay3~'.'~dc2~'.'~branch_id, 'remote_ip':overlay3~'.'~dc2~'.254',
        },
        ]
    %}
{% else %} {# East region #}
    {% set dc1 = datacenter.east.first.id %}
    {% set dc2 = datacenter.east.second.id %}
    {% set phase1s = [
        {   'name': 'H1_INET1', 'interface': 'Internet_1', 'remote_gw': datacenter.east.first.inet1,
            'networkid': dc1~'1', 'localid': region|upper~'_BR'~branch_id~'_INET1', 'status': 'up',
            'ip': overlay1~'.'~dc1~'.'~branch_id, 'remote_ip':overlay1~'.'~dc1~'.254',
        },
        {   'name': 'H1_INET2', 'interface': 'Internet_2', 'remote_gw': datacenter.east.first.inet2,
            'networkid': dc1~'2', 'localid': region|upper~'_BR'~branch_id~'_INET2', 'status': 'up',
            'ip': overlay2~'.'~dc1~'.'~branch_id, 'remote_ip':overlay2~'.'~dc1~'.254',
        },
        {   'name': 'H1_MPLS', 'interface': 'MPLS', 'remote_gw': datacenter.east.first.mpls,
            'networkid': dc1~'3', 'localid': region|upper~'_BR'~branch_id~'_MPLS', 'status': 'up',
            'ip': overlay3~'.'~dc1~'.'~branch_id, 'remote_ip':overlay3~'.'~dc1~'.254',
        },
        {   'name': 'H2_INET1', 'interface': 'Internet_1', 'remote_gw': datacenter.east.second.inet1,
            'networkid': dc2~'1', 'localid': region|upper~'_BR'~branch_id~'_INET1', 'status': 'down',
            'ip': overlay1~'.'~dc2~'.'~branch_id, 'remote_ip':overlay1~'.'~dc2~'.254',
        },
        {   'name': 'H2_INET2', 'interface': 'Internet_2', 'remote_gw': datacenter.east.second.inet2,
            'networkid': dc2~'2', 'localid': region|upper~'_BR'~branch_id~'_INET2', 'status': 'down',
            'ip': overlay2~'.'~dc2~'.'~branch_id, 'remote_ip':overlay2~'.'~dc2~'.254',
        },
        {   'name': 'H2_MPLS', 'interface': 'MPLS', 'remote_gw': datacenter.east.second.mpls,
            'networkid': dc2~'3', 'localid': region|upper~'_BR'~branch_id~'_MPLS', 'status': 'down',
            'ip': overlay3~'.'~dc2~'.'~branch_id, 'remote_ip':overlay3~'.'~dc2~'.254',
        },
        ]
    %}
{% endif %}

# localid on Branch is convenient since it is shown on IPsec monitor of DCs
{% if bidir_sdwan == 'remote_sla' %}
# Static overlay IP addresses must be used with 'remote-sla' to force the Hub adding an IKE route (with the priority)
# to reach the Branch. This IKE route is the BGP NH and its priority can be inherited by BGP
{% else %}
# "dependent" shortcuts are mandatory with mode-cfg overlays (0778974/0793117)
{% endif %}

{% if shortcut_routing == 'ipsec_selectors' %}  {# poc 7 'ADVPN with IPsec selectors' #}
# 'add-route enable' to populate routes over shortcuts based on IPsec SA traffic selectors
# 'mode-cfg-allow-client-selector enable' to allow configuration of phase src-selectors with mode-cfg
{% endif %}

{%- for phase1 in phase1s %}
    config vpn ipsec phase1-interface
        edit "{{phase1.name}}"
            set interface "{{phase1.interface}}"
            set ike-version 2
            set network-overlay enable
            set network-id {{phase1.networkid}}
            set peertype any
            set localid "{{phase1.localid}}"
            set net-device enable
            set auto-discovery-receiver enable

            {% if overlay == 'static' %}
              set mode-cfg disable
              set auto-discovery-shortcuts independent
            {% else %}
              set mode-cfg enable
              set auto-discovery-shortcuts dependent
            {% endif %}

            {% if shortcut_routing == 'ipsec_selectors' %}  {# poc 7 'ADVPN with IPsec selectors' #}
              set add-route enable
              set mode-cfg-allow-client-selector enable
            {% else %}  {# PoC 9 ADVPN with BGP RR #}
              set add-route disable
            {% endif %}

            set dpd on-idle
            set dpd-retryinterval 5
            set idle-timeout enable
            set idle-timeoutinterval 5
            set suite-b suite-b-gcm-128
            set remote-gw {{phase1.remote_gw}}
            set psksecret {{phase1.networkid}}{{phase1.networkid}}{{phase1.networkid}}
        next
    end

    config vpn ipsec phase2-interface
        edit "{{phase1.name}}"
            set phase1name "{{phase1.name}}"
            set keepalive enable  {# negotiation is automatically triggered by BGP session #}
        next
    end

    {% if shortcut_routing == 'ipsec_selectors' %}  {# poc 7 'ADVPN with IPsec selectors' #}
    config vpn ipsec phase2-interface
        edit "{{phase1.name}}"
            set src-addr-type name
            set dst-addr-type name
            set src-name "LAN"
            set dst-name "all"
            set auto-negotiate enable {# for negotiation so that tunnel is ready for data traffic #}
        next
        {% if overlay == 'static' %}
        # phase2 for overlay IP is not created automatically for static overlay
          edit "!{{phase1.name}}"
              set phase1name "{{phase1.name}}"
              set keepalive enable  {# negotiation is automatically triggered by BGP session #}
              set src-subnet {{phase1.ip}} 255.255.255.255
              set dst-subnet 0.0.0.0 0.0.0.0
          next
        {% endif %}
    end
    {% endif %}

    config system interface
        edit "{{phase1.name}}"
            set status {{phase1.status}}
            set allowaccess ping
            {% if overlay == 'static' %}
              set ip {{phase1.ip}} 255.255.255.255
              set remote-ip {{phase1.remote_ip}} 255.255.255.0
            {% endif %}
        next
    end
{% endfor %}
