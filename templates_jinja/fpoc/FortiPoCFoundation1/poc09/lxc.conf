hostname {{name}}

{# Create/Configure interfaces and default routing #}
{# In case of namespaces, create scripts to conveniently enter namespaces #}

{% if namespaces %}
    ip addr flush dev {{interface}} scope global
    ip addr add dev {{interface}} {{ipmask}} brd +
    ip link set dev {{interface}} up
    {% for name, ns in namespaces.items() %}
        ip netns add {{name}}
        ip netns exec {{name}} ip link set dev lo up
        ip link add link {{interface}} name {{interface}}.{{ns.vlanid}} type vlan id {{ns.vlanid}}
    	ip link set {{interface}}.{{ns.vlanid}} netns {{name}}
        ip netns exec {{name}} ip addr flush dev {{interface}}.{{ns.vlanid}} scope global
        ip netns exec {{name}} ip addr add dev {{interface}}.{{ns.vlanid}} {{ns.ip_lxc}}/{{ns.mask}} brd +
        ip netns exec {{name}} ip link set dev {{interface}}.{{ns.vlanid}} up
        ip netns exec {{name}} ip route replace default via {{ns.ip}}

        echo '#!/bin/bash' > ~/enter_{{name}}.sh
        echo 'ip netns exec {{name}} /bin/bash' >> ~/enter_{{name}}.sh
        chmod a+x ~/enter_{{name}}.sh
    {% endfor %}

    {# Configure .bashrc so that the name of the current namespace is displayed in the PROMPT #}
    {# Use quotes for the echo command so that it is not resolved by the bash #}
    {# Use 'raw' to avoid jinja resolving the bash variables with curly braces #}
    grep -v '_ns_name' ~/.bashrc > ~/.bashrc2
    {% raw %}
    echo '_ns_name=$(ip netns identify 2>/dev/null)' >> ~/.bashrc2
    echo 'PS1="\e[0;31m${_ns_name:+(${_ns_name})}\e[m${debian_chroot:+($debian_chroot)}\u@\h:\w# "' >> ~/.bashrc2
    {% endraw %}
    echo "unset _ns_name" >> ~/.bashrc2
    rm -f ~/.bashrc
    mv ~/.bashrc2 ~/.bashrc
{% else %}
    {% if vlan %}
        ip link add link {{interface}} name {{interface}}.{{vlan}} type vlan id {{vlan}}
        ip addr flush dev {{interface}}.{{vlan}} scope global
        ip addr add dev {{interface}}.{{vlan}} {{ipmask}} brd +
        ip link set dev {{interface}}.{{vlan}} up
    {% else %}
        ip addr flush dev {{interface}} scope global
        ip addr add dev {{interface}} {{ipmask}} brd +
        ip link set dev {{interface}} up
    {% endif %}
{% endif %}

{% if gateway %}
    ip route replace default via {{gateway}}
{% endif %}

{# Add entries in /etc/hosts for all PC clients #}

{% set clients = [
    { 'name': 'PC-WEST-BR1', 'ip': '10.0.1.101'},
    { 'name': 'PC-WEST-BR2', 'ip': '10.0.2.101'},
    { 'name': 'PC-EAST-BR3', 'ip': '10.0.3.101'},
    { 'name': 'PC-WEST-DC1', 'ip': '10.1.0.7'},
    { 'name': 'PC-WEST-DC2', 'ip': '10.2.0.7'},
    { 'name': 'PC-EAST-DC3', 'ip': '10.3.0.7'},
    { 'name': 'INTERNET-SERVER', 'ip': '198.18.8.8'},
]%}

{% if namespaces %}
    {% set clients = [
        { 'name': 'PC-WEST-BR1', 'ip': '10.0.1.101'},
        { 'name': 'PC-WEST-BR1-SEG1', 'ip': '10.0.11.101'},
        { 'name': 'PC-WEST-BR1-SEG2', 'ip': '10.0.21.101'},

        { 'name': 'PC-WEST-BR2', 'ip': '10.0.2.101'},
        { 'name': 'PC-WEST-BR2-SEG1', 'ip': '10.0.12.101'},
        { 'name': 'PC-WEST-BR2-SEG2', 'ip': '10.0.22.101'},

        { 'name': 'PC-EAST-BR3', 'ip': '10.0.3.101'},
        { 'name': 'PC-EAST-BR3-SEG1', 'ip': '10.0.13.101'},
        { 'name': 'PC-EAST-BR3-SEG2', 'ip': '10.0.23.101'},

        { 'name': 'PC-WEST-DC1', 'ip': '10.1.0.7'},
        { 'name': 'PC-WEST-DC1-SEG1', 'ip': '10.1.1.7'},
        { 'name': 'PC-WEST-DC1-SEG2', 'ip': '10.1.2.7'},

        { 'name': 'PC-WEST-DC2', 'ip': '10.2.0.7'},
        { 'name': 'PC-WEST-DC2-SEG1', 'ip': '10.2.1.7'},
        { 'name': 'PC-WEST-DC2-SEG2', 'ip': '10.2.2.7'},

        { 'name': 'PC-EAST-DC3', 'ip': '10.3.0.7'},
        { 'name': 'PC-EAST-DC3-SEG1', 'ip': '10.3.1.7'},
        { 'name': 'PC-EAST-DC3-SEG2', 'ip': '10.3.2.7'},

        { 'name': 'INTERNET-SERVER', 'ip': '198.18.8.8'},
    ]%}
{% endif %}

{# Re-create the /etc/hosts each time to avoid accumulation (idempotency) #}
echo -e "127.0.0.1\tlocalhost" > /etc/hosts

{% for client in clients %}
    echo -e "{{client.ip}}\t{{client.name}}" >> /etc/hosts
{% endfor %}

{# Script to create slow TCP stream with another client #}
{# echo '#!/bin/bash' > ~/tcp_stream.sh #}
{# echo 'curl --limit-rate 10k --output /dev/null http://$1:$2/200M.dat' >> ~/tcp_stream.sh #}
{# chmod a+x ~/tcp_stream.sh #}

{# Start HTTP Servers in a tmux session #}
{# tmux new-session -d -s HTTPSERVER #}
{# tmux send-keys -t HTTPSERVER '/fortipoc/traffic_as_server.sh' C-m #}

{% if namespaces %}
    {# Start HTTP Servers in a tmux session for each namespace #}
    {% for name, ns in namespaces.items() %}
        {# tmux send-keys -t HTTPSERVER '~/enter_{{name}}.sh' C-m #}
        {# tmux send-keys -t HTTPSERVER 'python3 -m http.server --bind 0.0.0.0 {{8080 + ns.vrfid}} --directory ~/ &' C-m #}
        {# tmux send-keys -t HTTPSERVER 'exit' C-m #}
    {% endfor %}
{% endif %}